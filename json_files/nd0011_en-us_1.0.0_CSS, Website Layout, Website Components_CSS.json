{
  "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
  "id": 908065,
  "is_public": true,
  "key": "25962c91-c1d5-47a4-9580-ac6ff3a151ed",
  "locale": "en-us",
  "root_owner_id": null,
  "semantic_type": "Lesson",
  "title": "CSS",
  "updated_at": "2019-09-30T22:50:15.249Z",
  "version": "1.0.0",
  "image": {
    "url": "https://video.udacity-data.com/topher/2018/March/5ab999ca_2-4-adding-css-for-style2x/2-4-adding-css-for-style2x.jpg",
    "width": 592,
    "height": 640
  },
  "video": null,
  "lab": null,
  "project": null,
  "summary": "Learn the basics of CSS and start using different properties to create appealing layouts and styling for all types of use cases.",
  "lesson_type": "Classroom",
  "duration": 150,
  "display_workspace_project_only": false,
  "is_project_lesson": false,
  "career_portal_experience_levels": null,
  "_concepts_ids": [
    908051,
    908056,
    908053,
    908050,
    908057,
    908058,
    908055,
    908059,
    908052,
    908062,
    908054,
    908063,
    908064,
    908061,
    908060
  ],
  "_project_id": null,
  "concepts": [
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908051,
      "is_public": true,
      "key": "84e47528-8580-48ff-8540-00fa1798f136",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Why learn CSS?",
      "updated_at": "2019-10-08T12:25:01.285Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        907979
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907979,
          "is_public": true,
          "key": "3ed8ce33-ca6c-4752-a462-149b77c6f2a1",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "ND001 C01 L02 01 Why Learn CSS ",
          "updated_at": "2019-10-08T12:25:01.023Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "100460",
            "youtube_id": "qVSCT7YATVg",
            "topher_id": "84e1a3a2-d4a2-11e9-9db2-7fa903e7e58e",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2da9_nd001-c01-l02-01-why-learn-css-/nd001-c01-l02-01-why-learn-css-_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2da9_nd001-c01-l02-01-why-learn-css-/nd001-c01-l02-01-why-learn-css-_480p_1000kbps.mp4",
              "uri_480p_ogg": null,
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2da9_nd001-c01-l02-01-why-learn-css-/nd001-c01-l02-01-why-learn-css-_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2019/August/5d4a2da9_nd001-c01-l02-01-why-learn-css-/hls/playlist.m3u8"
            }
          }
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908056,
      "is_public": true,
      "key": "c119e703-4ad0-4e8b-808d-5d9f77757d2d",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Selectors",
      "updated_at": "2019-10-08T12:25:07.038Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        907983,
        907980,
        907988,
        907997,
        908044,
        907991,
        908000,
        907987,
        908007,
        907985,
        907986
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907983,
          "is_public": true,
          "key": "e8fac252-3ed5-4b91-87ae-28fb8e361e66",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Selectors Heading",
          "updated_at": "2019-10-08T12:25:01.956Z",
          "version": "1.0.0",
          "text": "# CSS Selectors",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907980,
          "is_public": true,
          "key": "87ca4199-9b9c-41ac-b890-09b05e459793",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "ND001 C01 L02 02 Selectors",
          "updated_at": "2019-10-08T12:25:02.634Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "100461",
            "youtube_id": "UpIzcyHk1Jo",
            "topher_id": "84e1affa-d4a2-11e9-9dd8-3f9f310bc4d0",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2db4_nd001-c01-l02-02-selectors/nd001-c01-l02-02-selectors_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2db4_nd001-c01-l02-02-selectors/nd001-c01-l02-02-selectors_480p_1000kbps.mp4",
              "uri_480p_ogg": null,
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2db4_nd001-c01-l02-02-selectors/nd001-c01-l02-02-selectors_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2019/August/5d4a2db4_nd001-c01-l02-02-selectors/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907988,
          "is_public": true,
          "key": "9317c7c5-6710-41ee-99a6-cbac18ae3415",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Tags",
          "updated_at": "2019-10-08T12:25:02.934Z",
          "version": "1.0.0",
          "text": "### Tags\n\nIn this section, you'll learn how to use different visual CSS guidelines to style elements individually and by group.\n\nCSS can select HTML elements by using an element’s tag name. A tag name is the word (or character) between HTML angle brackets.\n\nFor example, in HTML, the tag for a paragraph element is `<p>`. The CSS syntax for selecting `<p>` elements is:\n\n```css\np {\n  color: red;\n}\n```\n\nIn the example above, all paragraph elements will be selected using a CSS selector. The selector in the example above is `p`. Note that the CSS selector matches the HTML tag for that element, but without the angle brackets.\n\nIn addition, two curly braces follow immediately after the selector (an opening and closing brace, respectively). Any CSS properties will go inside of the curly braces to style the selected elements.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907997,
          "is_public": true,
          "key": "099e1a60-90cd-416e-bbe6-f9c0dc3e614d",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "Tags Graphic",
          "updated_at": "2019-10-08T12:25:03.256Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b3669_css-selector/css-selector.png",
          "width": 602,
          "height": 389,
          "alt": "An example of a CSS selector, property and value.",
          "caption": "An example of a CSS selector, property and value.",
          "resources": null,
          "instructor_notes": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908044,
          "is_public": true,
          "key": "8333253e-eb4a-4289-9ed3-dccaf8b1bb22",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Classes",
          "updated_at": "2019-10-08T12:25:03.719Z",
          "version": "1.0.0",
          "text": "### Classes\n\nCSS is not limited to selecting elements by tag name. HTML elements can have more than just a tag name; they can also have attributes. One common attribute is the class attribute. It’s also possible to select an element by its class attribute.\n\nFor example, consider the following HTML:\n\n```\n<p class=\"brand\">Sole Shoe Company</p>\n```\n\nThe paragraph element in the example above has a class attribute within the `<p>` tag. The class attribute is set to \"brand\". To select this element using CSS, we could use the following CSS selector:\n\n```\n.brand {\n\n}\n```\nTo select an HTML element by its class using CSS, a period (`.`) must be prepended to the class’s name. In the above case, the class is “brand”, so the CSS selector for it is `.brand`.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907991,
          "is_public": true,
          "key": "e55fe6a5-3574-47a1-be8e-ef22b42563aa",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Ids",
          "updated_at": "2019-10-08T12:25:04.160Z",
          "version": "1.0.0",
          "text": "### Ids\n\nFor situations where you need more specificity in styling, you may also select elements for CSS using an `id` attribute. You can have different ids associated with a class (although a class is not required). For example, consider the following HTML:\n\n```html\n<p id=”solo” class=\"brand\">Sole Shoe Company</p>\n```\n\nThe `id` attribute can be added to an element, along with a class attribute. On the CSS side, the delineation is made by using `#` to represent an `id`, the same way `.` is used for `class`. The CSS to select and style the HTML element above could look like this:\n```css\n#solo {\n  color: purple;\n}\n```",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908000,
          "is_public": true,
          "key": "ded70f97-ea16-4d4f-bd23-07f6394bde1a",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Pseudo-classes",
          "updated_at": "2019-10-08T12:25:04.613Z",
          "version": "1.0.0",
          "text": "### Pseudo-classes\n\nA CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). For example, `:hover` can be used to change a button's color when the user's pointer hovers over it.\n\n```css\nselector:pseudo-class {\n  property: value;\n}\n```\nFor more information on pseudo-classes, [see the Mozilla Dev Docs here.](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907987,
          "is_public": true,
          "key": "644d959c-8c28-4ea0-a3be-98d8f2166f40",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "RadioQuizAtom",
          "title": "Quiz 1 - Pseudo-classes",
          "updated_at": "2019-10-08T12:25:05.319Z",
          "version": "1.0.0",
          "question": {
            "prompt": "Which of the following correctly demonstrated the syntax for CSS pseudo classes?",
            "correct_feedback": "Great job, you’re a quick study! Keep it up!",
            "video_feedback": null,
            "default_feedback": "That’s ok! Pseudo classes can be tough. As a reminder, they are applied after the selector and separated by a `:`.",
            "answers": [
              {
                "id": "rbk1",
                "text": "#myButton:hover {\n}",
                "is_correct": true,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk2",
                "text": "#myButton hover {\n}",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk3",
                "text": "#myButton {\n  hover:\n}",
                "is_correct": false,
                "incorrect_feedback": ""
              }
            ]
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908007,
          "is_public": true,
          "key": "8702114d-b7ab-4a8f-bbda-0af75f7997ef",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Attributes",
          "updated_at": "2019-10-08T12:25:05.851Z",
          "version": "1.0.0",
          "text": "### Attributes\n\nAttribute selectors are a special kind of selector that will match elements based on their attributes and attribute values.\n\nTheir generic syntax consists of square brackets (`[]`) containing an attribute name followed by an optional condition to match against the value of the attribute.\n\nAttribute selectors can be divided into two categories depending on the way they match attribute values:\n\n1. Presence and value attribute selectors and\n2. Substring value attribute selectors.\n\nThese attribute selectors try to match an exact attribute value:\n\n- `[attr]` This selector will select all elements with the attribute attr, whatever its value.\n- `[attr=val]` This selector will select all elements with the attribute attr, but only if its value is val.\n- `[attr~=val]` This selector will select all elements with the attribute attr, but only if val is one of a space-separated list of words contained in attr's value. (This one is a bit more complex, so checking some [documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) might be helpful.)\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907985,
          "is_public": true,
          "key": "f4ec6dc2-2941-4fa8-af18-9987580d6448",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "RadioQuizAtom",
          "title": "Quiz 2 - Attributes",
          "updated_at": "2019-10-08T12:25:06.262Z",
          "version": "1.0.0",
          "question": {
            "prompt": "Using an attribute selector, how would you select an `<img>` element with the attribute of `alt`?\n",
            "correct_feedback": "That’s correct!",
            "video_feedback": null,
            "default_feedback": "",
            "answers": [
              {
                "id": "rbk1",
                "text": "`img[alt]`",
                "is_correct": true,
                "incorrect_feedback": "That’s correct!"
              },
              {
                "id": "rbk2",
                "text": "`img=alt`",
                "is_correct": false,
                "incorrect_feedback": "Not quite. Think about the syntax. There should be some brackets"
              },
              {
                "id": "rbk3",
                "text": "`img > alt`",
                "is_correct": false,
                "incorrect_feedback": "Not quite. Think about the syntax. There should be some brackets"
              },
              {
                "id": "rbk4",
                "text": "`img.alt`",
                "is_correct": false,
                "incorrect_feedback": "Not quite. Think about the syntax. There should be some brackets"
              }
            ]
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907986,
          "is_public": true,
          "key": "d20eee91-0f68-4bb3-8d30-3053fa1f7b37",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Multiple Selectors",
          "updated_at": "2019-10-08T12:25:06.667Z",
          "version": "1.0.0",
          "text": "### Multiple Selectors\n\nWhat if we want to add some styles to all our headings? We don’t want to have redundant rules, since that would eventually become a nightmare to maintain and is not scalable at all.\n\n```css\nh1 {\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\nh2 {\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\nh3 {\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\nh4 {\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\nh5 {\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\nh6 {\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n```\n\nInstead, we can select multiple HTML elements in the same CSS rule by separating them with commas. Add this to our styles.css file:\n\n```css\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n```\n\nThis defines the font to use for all of our headings with a single rule. That’s great, because if we ever want to change it, we only have to do so in one place. Copying and pasting code is usually a bad idea for web developers, and multiple selectors can help reduce that kind of behavior quite a bit.\n",
          "instructor_notes": "",
          "resources": null
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908053,
      "is_public": true,
      "key": "9959d5bd-b1dc-4f37-83c9-4e2636d03bfa",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Linking CSS",
      "updated_at": "2019-10-08T12:25:09.871Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        908019,
        907978,
        907981,
        907996,
        907994,
        907984
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908019,
          "is_public": true,
          "key": "8b1bc290-49f9-4f5d-9b0a-7b98a133a1d7",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Linking CSS Heading",
          "updated_at": "2019-10-08T12:25:07.417Z",
          "version": "1.0.0",
          "text": "# Linking CSS",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907978,
          "is_public": true,
          "key": "8e2001f0-8405-4d4a-95cc-d0317229922c",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "ND001 C01 L02 03 Linking CSS",
          "updated_at": "2019-10-08T12:25:07.781Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "100462",
            "youtube_id": "_yRMz3dTRJk",
            "topher_id": "84e0fb00-d4a2-11e9-9ba7-439d164162df",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2dbd_nd001-c01-l02-03-linking-css/nd001-c01-l02-03-linking-css_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2dbd_nd001-c01-l02-03-linking-css/nd001-c01-l02-03-linking-css_480p_1000kbps.mp4",
              "uri_480p_ogg": null,
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2dbd_nd001-c01-l02-03-linking-css/nd001-c01-l02-03-linking-css_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2019/August/5d4a2dbd_nd001-c01-l02-03-linking-css/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907981,
          "is_public": true,
          "key": "b10033ed-17de-40ef-80f7-68d9ea8f3ca6",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Inline",
          "updated_at": "2019-10-08T12:25:08.160Z",
          "version": "1.0.0",
          "text": "### Inline\n\nAlthough CSS is a different language than HTML, it’s possible to write CSS code directly within HTML code using inline styles.\n\nTo style an HTML element, you can add the style attribute directly to the opening tag. After you add the attribute, you can set it equal to the CSS style(s) you’d like applied to that element.\n\n```html\n<p style=\"color: red;\">I'm learning to code!</p>\n```\n\nThe code in the example above demonstrates how to use inline styling. The paragraph element has a style attribute within its opening tag. Next, the style attribute is set equal to `color: red;`, which will set the color of the paragraph text to red within the browser.\n\nYou might be wondering about the syntax of the following snippet of code: `color: red;`. At the moment, the details of the syntax are not important; you’ll learn more about CSS syntax in other exercises. For now, it’s important to know that inline styles are a quick way of directly styling an HTML element.\n\nIf you’d like to add more than one style with inline styles, simply keep adding to the style attribute. Make sure to end the styles with a semicolon (`;`).\n\n```html\n<p style=\"color: red; font-size: 20px;\">I'm learning to code!</p>\n```\n\nYou can also stick CSS rules in the style attribute of an HTML element. In dummy.html, we have a link that doesn’t actually go anywhere. Let’s make it red via an inline style so we remember it’s a dead link:\n\n```html\n<p>\n  Want to try crossing out an\n  <a href=\"nowhere.html\" style=\"color: #990000; text-decoration: line-through;\">obsolete link</a>\n  ? This is your chance!\n</p>\n```\n\nLike page-specific styles, this is the same CSS syntax we’ve been working with. However, since it’s in an attribute, it needs to be condensed to a single line. Inline styles are the most specific way to define CSS. The color and text-decoration properties we defined here trump everything. Even if we went back and added a text-decoration: none to our `<style>` element, it wouldn’t have any effect.\n\nInline styles should be avoided at all costs because they make it impossible to alter styles from an external stylesheet. If you ever wanted to re-style your website down the road, you can’t just change a few rules in your global styles.css file—you’d have to go through every single page and update every single HTML element that has a style attribute. It’s horrifying.\n\nThat said, there will be many times when you need to apply styles to only a specific HTML element. For this, you should always use CSS classes instead of inline styles.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907996,
          "is_public": true,
          "key": "20d69485-809e-443d-8035-2cdc34b0e001",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Style Tag",
          "updated_at": "2019-10-08T12:25:08.815Z",
          "version": "1.0.0",
          "text": "### Style Tag\n\nInline styles are a fast way of styling HTML, but they also have limitations. If you wanted to style, for example, multiple `<h1>` elements, you would have to add inline styling to each element manually. In addition, you would also have to maintain the HTML code when additional `<h1>` elements are added.\n\nFortunately, HTML allows you to write CSS code in its own dedicated section with the `<style>` element. CSS can be written between opening and closing `<style>` tags. To use the `<style>` element, it must be placed inside of the `<head>` element.\n\n```html\n<head>\n  <style></style>\n</head>\n```\n\nAfter adding a `<style>` tag in the head section, you can begin writing CSS code.\n\n```html\n<head>\n  <style>\n    p {\n      color: red;\n      font-size: 20px;\n    }\n  </style>\n</head>\n```\n\nThe CSS code in the example above changes the color of all paragraph text to red and also changes the size of the text to 20 pixels. Note how the syntax of the CSS code matches (for the most part) the syntax you used for inline styling. The main difference is that you can specify which elements to apply the styling to.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907994,
          "is_public": true,
          "key": "f15ec650-239e-4f78-b5d7-e8657e005d5d",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "External Stylesheets",
          "updated_at": "2019-10-08T12:25:09.215Z",
          "version": "1.0.0",
          "text": "### External Stylesheets\n\nWhen HTML and CSS code are in separate files, the files must be linked. Otherwise, the HTML file won’t be able to locate the CSS code, and the styling will not be applied.\n\nYou can use the `<link>` element to link HTML and CSS files together. The `<link>` element must be placed within the head of the HTML file. It is a self-closing tag and requires the following three attributes:\n\n- `href` — like the anchor element, the value of this attribute must be the address, or path, to the CSS file.\n- `type` — this attribute describes the type of document that you are linking to (in this case, a CSS file). The value of this attribute should be set to text/css.\n- `rel` — this attribute describes the relationship between the HTML file and the CSS file.\n\nBecause you are linking to a stylesheet, the value of `rel` should be set to stylesheet.\n\nWhen linking an HTML file and a CSS file together, the `<link>` element will look like the following:\n\n```html\n<link href=\"https://udacity.com/style.css\" type=\"text/css\" rel=\"stylesheet\" />\n```\n\nSpecifying the path to the stylesheet using a URL is one way of linking a stylesheet.\n\nIf the CSS file is stored in the same directory as your HTML file, then you can specify a relative path instead of a URL, like so:\n\n```html\n<link href=\"./style.css\" type=\"text/css\" rel=\"stylesheet\" />\n```\n\nUsing a relative path is very common way of linking a stylesheet.\n\n\n```html\n<link rel=\"stylesheet\" href=\"styles.css\" />\n```\n\nNote that in HTML5, you actually don’t have to specify `type=\"text/css\"` here.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907984,
          "is_public": true,
          "key": "93ca99a7-68fc-4073-a7a0-4019a99c4d1c",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "External Stylesheets",
          "updated_at": "2019-10-08T12:25:09.524Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b36a9_css-file-relationship/css-file-relationship.png",
          "width": 470,
          "height": 410,
          "alt": "Relationship between HTML and CSS files",
          "caption": "Relationship between HTML and CSS files",
          "resources": null,
          "instructor_notes": null
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908050,
      "is_public": true,
      "key": "7bcdc55a-7a7e-45b3-aa43-ebf0d4b337b8",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Exercise: Linking CSS",
      "updated_at": "2019-10-08T12:25:10.772Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        907995,
        908081
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907995,
          "is_public": true,
          "key": "3db9f7aa-f4c0-40f4-9e7d-5439caa96a8d",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Instructions",
          "updated_at": "2019-10-08T12:25:10.128Z",
          "version": "1.0.0",
          "text": "# Exercise: Linking CSS\n\nLink the stylesheet `exercise-1.css` to `exercise-1.html`.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 908081,
          "is_public": true,
          "key": "dfa6000a-92e1-4dfe-8a7a-69773187df02",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "WorkspaceAtom",
          "title": null,
          "updated_at": "2019-10-08T12:25:10.434Z",
          "version": "1.0.0",
          "pool_id": "webterminal",
          "workspace_id": "r179038c908050xHTMLLIVEgxhdm12p",
          "view_id": "html-live-p354b",
          "gpu_capable": false,
          "name": "css-linking-css",
          "configuration": {
            "id": "reserved",
            "blueprint": {
              "conf": {
                "disk": null,
                "openFiles": [
                  "/home/workspace/exercise-1.html"
                ],
                "showFiles": true,
                "allowClose": true,
                "showEditor": true,
                "allowSubmit": false,
                "autoRefresh": true,
                "previewFile": "/home/workspace/exercise-1.html"
              },
              "kind": "html-live"
            },
            "workspaceId": "reserved"
          },
          "starter_files": null
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908057,
      "is_public": true,
      "key": "bfdd28c9-1186-4e09-a8d5-c34e08c28b3a",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Specificity",
      "updated_at": "2019-10-08T12:25:14.380Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        907993,
        907992,
        907982,
        907990,
        908039,
        908041,
        908002
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907993,
          "is_public": true,
          "key": "39b94cae-5230-4596-86e2-9b98dd2073b1",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Specificity Heading",
          "updated_at": "2019-10-08T12:25:11.116Z",
          "version": "1.0.0",
          "text": "# Specificity",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907992,
          "is_public": true,
          "key": "ffecc5ae-9357-4ebe-b15f-83255e479ec7",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "ND001 C01 L02 04 Specificity",
          "updated_at": "2019-10-08T12:25:11.520Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "100463",
            "youtube_id": "soXHn3u9UUI",
            "topher_id": "84e190ba-d4a2-11e9-9d76-1b8bcc07c9ea",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2dc5_nd001-c01-l02-04-specificity/nd001-c01-l02-04-specificity_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2dc5_nd001-c01-l02-04-specificity/nd001-c01-l02-04-specificity_480p_1000kbps.mp4",
              "uri_480p_ogg": null,
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2dc5_nd001-c01-l02-04-specificity/nd001-c01-l02-04-specificity_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2019/August/5d4a2dc5_nd001-c01-l02-04-specificity/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907982,
          "is_public": true,
          "key": "880787ac-8a94-4f32-b1c7-5721d1f90d8d",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Specificity",
          "updated_at": "2019-10-08T12:25:12.209Z",
          "version": "1.0.0",
          "text": "Because elements can have multiple CSS selectors, there is a hierarchy for the weight given to each type of selector. Here is the logical order of selectors from least to most weight assigned:\n\n- Type selectors (e.g., h1) and pseudo-elements (e.g., `::before`).\n- Class selectors (e.g., `.example)`, attributes selectors (e.g., `[type=\"radio\"]`) and pseudo-classes (e.g., `:hover`).\n- ID selectors (e.g., `#example`).\n\nThis concept can help you understand why your styles aren't being applied in the way you expect. \n\nThere is a way to escape or override the specificity evaluation of elements using the `!important` keyword after an individual CSS property rule, but a couple important reminders:\n\nAlways look for a way to use specificity before even considering `!important`.\nNever use `!important` on site-wide CSS.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907990,
          "is_public": true,
          "key": "8664498b-5428-4d6f-8553-9de8eac60c4d",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "Image - Specificity1",
          "updated_at": "2019-10-08T12:25:12.728Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b3731_css-specificity1/css-specificity1.png",
          "width": 640,
          "height": 275,
          "alt": "Specificity levels",
          "caption": "Specificity levels",
          "resources": null,
          "instructor_notes": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908039,
          "is_public": true,
          "key": "037a689d-2bea-413d-8a04-2144b5fd96cc",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "Image - Specificity2",
          "updated_at": "2019-10-08T12:25:13.093Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b3791_css-specificity2/css-specificity2.png",
          "width": 500,
          "height": 1000,
          "alt": "Specificity explanation - example",
          "caption": "Specificity explanation - example",
          "resources": null,
          "instructor_notes": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908041,
          "is_public": true,
          "key": "7890c27c-f91d-4d98-a385-be0e521d554b",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "Specificity3",
          "updated_at": "2019-10-08T12:25:13.386Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b37be_css-specificity3/css-specificity3.png",
          "width": 750,
          "height": 640,
          "alt": "Specificity explanation - example",
          "caption": "Specificity explanation - example",
          "resources": null,
          "instructor_notes": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908002,
          "is_public": true,
          "key": "8776221f-f008-4fd6-aa9d-691791a07174",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "RadioQuizAtom",
          "title": "Quiz 3 - Specificity",
          "updated_at": "2019-10-08T12:25:13.839Z",
          "version": "1.0.0",
          "question": {
            "prompt": "In accordance to cascading and specificity rules, what color will the link be?\n\n```css\n.link-text {\n  color: red;\n}\n\nul li a {\n  color: green;\n}\n\nul a {\n  color: yellow;\n}\n\na {\n  color: blue;\n}\n```\n\n```html\n<ul>\n  <li><a class=\"link-text\">the link</a></li>\n  <li>a list item</li>\n  <li>a list item</li>\n</ul>\n```",
            "correct_feedback": "Correct! Well done.",
            "video_feedback": null,
            "default_feedback": "",
            "answers": [
              {
                "id": "rbk1",
                "text": "red",
                "is_correct": true,
                "incorrect_feedback": "Correct! Well done!"
              },
              {
                "id": "rbk2",
                "text": "green",
                "is_correct": false,
                "incorrect_feedback": "Check the specificity rule in the first image recently introduced."
              },
              {
                "id": "rbk3",
                "text": "yellow",
                "is_correct": false,
                "incorrect_feedback": "Check the specificity rule in the first image recently introduced."
              },
              {
                "id": "rbk4",
                "text": "blue",
                "is_correct": false,
                "incorrect_feedback": "Check the specificity rule in the first image recently introduced."
              }
            ]
          }
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908058,
      "is_public": true,
      "key": "40e40c66-c516-41fe-affb-af72cb969139",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "The Box Model",
      "updated_at": "2019-10-08T12:25:19.061Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        907999,
        908013,
        908021,
        908029,
        908005,
        908001,
        907989,
        908040,
        908015,
        908031,
        908012
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907999,
          "is_public": true,
          "key": "e99daf24-e12b-4e16-a967-be8c5789115a",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "The Box Model Heading",
          "updated_at": "2019-10-08T12:25:14.734Z",
          "version": "1.0.0",
          "text": "# The Box Model",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908013,
          "is_public": true,
          "key": "902b819e-dcfd-464f-8a51-6c3dd4602698",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "ND001 C01 L02 05 The Box Model",
          "updated_at": "2019-10-08T12:25:15.079Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "100464",
            "youtube_id": "eSl7zg_c8CE",
            "topher_id": "84e1c71a-d4a2-11e9-9e20-7f847044df82",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2dd6_nd001-c01-l02-05-the-box-model/nd001-c01-l02-05-the-box-model_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2dd6_nd001-c01-l02-05-the-box-model/nd001-c01-l02-05-the-box-model_480p_1000kbps.mp4",
              "uri_480p_ogg": null,
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2dd6_nd001-c01-l02-05-the-box-model/nd001-c01-l02-05-the-box-model_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2019/August/5d4a2dd6_nd001-c01-l02-05-the-box-model/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908021,
          "is_public": true,
          "key": "426cebd6-e001-4bdf-8ebb-152e3ada4561",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Content",
          "updated_at": "2019-10-08T12:25:15.569Z",
          "version": "1.0.0",
          "text": "Just like CSS, HTML and JS are the three basic building blocks of the web, the box model is one of the basic building blocks for CSS.\n\nEvery beginner should first start with the basics. In case of CSS, the basics are learning the box model. Before proceeding with learning any other CSS concepts, this is the one you should master first!\n\nThe box model is the basic building block of CSS.\n\nWhen a browser renders (draws) a webpage each element, for example a piece of text or an image, is drawn as a rectangular box following the rules of the CSS Box Model.\n\nBefore you dive deeper, you should understand that every element in web design is a rectangular box. You have probably heard this multiple times before, but this is an important concept that every developer should be aware of.\n\nAccording to the box model concept, every element on a page is a rectangular box and may have width, height, padding, borders, and margins.\n\nNow, let’s see what the mysterious box model is all about.\n\n### Content\n\nFirst, we have the content of the box itself, which has a height and width.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908029,
          "is_public": true,
          "key": "19990371-030f-4842-913d-f208a761049f",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "Content",
          "updated_at": "2019-10-08T12:25:15.915Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b384e_css-content/css-content.png",
          "width": 250,
          "height": 250,
          "alt": "The content box has a height and width.",
          "caption": "The content box has a height and width.",
          "resources": null,
          "instructor_notes": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908005,
          "is_public": true,
          "key": "f41e024a-b631-4276-804a-a597277d94c8",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Padding",
          "updated_at": "2019-10-08T12:25:16.238Z",
          "version": "1.0.0",
          "text": "### Padding\n\nNext is padding - the space between the box’s content and its border. Note that padding is *in addition* to the content’s height and width, and is considered to be inside the element itself.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908001,
          "is_public": true,
          "key": "59088849-f2fc-4774-9b60-d8d31fb4f3d4",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "Padding",
          "updated_at": "2019-10-08T12:25:16.645Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b38ee_css-padding/css-padding.png",
          "width": 500,
          "height": 400,
          "alt": "Padding extends outside the content box.",
          "caption": "Padding extends outside the content box.",
          "resources": null,
          "instructor_notes": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907989,
          "is_public": true,
          "key": "0f1a61f1-2e4a-4157-8fd7-37eb0dc8a27e",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Border",
          "updated_at": "2019-10-08T12:25:17.077Z",
          "version": "1.0.0",
          "text": "### Border\n\nContinuing our journey outward from the center of the CSS box model, we have the border: a line drawn around the content and padding of an element. The border property requires a new syntax that we’ve never seen before. First, we define the stroke width of the border, then its style, followed by its color.\n\nThis tells the browser to draw a thin gray line around our heading. Notice how the border bumps right up next to the padding with no space in between. And, if you shrink your browser enough for the heading to be split over two lines, both the padding and the border will still be there.\n\nDrawing a border around our entire heading makes it look a little 1990s, so how about we limit it to the bottom of the heading? Like padding, there are `-top`, `-bottom`, `-left`, and `-right` variants for the border property:\n\n`border-bottom: 1px solid #5D6063;`\n\nBorders are common design elements, but they’re also invaluable for debugging. When you’re not sure how a box is being rendered, add a border: 1px solid red; declaration to it. This will clearly show the box’s padding, margin, and overall dimensions with just a single line of CSS. After you figured out why your stuff is broken, simply delete the rule.\n\nIf you've ever used a table in a word processor or spreadsheet, then you should be familiar with borders. With CSS, you can add a border to just about anything.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908040,
          "is_public": true,
          "key": "08ee862c-c181-4204-86fe-d4fc3d19d4a8",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "Border",
          "updated_at": "2019-10-08T12:25:17.508Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b3919_css-border/css-border.png",
          "width": 500,
          "height": 400,
          "alt": "The border is the line between the box’s padding and margin.",
          "caption": "The border is the line between the box’s padding and margin.",
          "resources": null,
          "instructor_notes": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908015,
          "is_public": true,
          "key": "b0098931-b0ca-401c-b43a-8bf391af6eaa",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Margin",
          "updated_at": "2019-10-08T12:25:17.875Z",
          "version": "1.0.0",
          "text": "### Margin\n\nLast is the margin, which surrounds the rest of the box. It is the space between the box and surrounding boxes.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908031,
          "is_public": true,
          "key": "904cc747-5d83-4ea9-985f-4ebdca69e987",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "Margin",
          "updated_at": "2019-10-08T12:25:18.191Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b3937_css-margin/css-margin.png",
          "width": 750,
          "height": 500,
          "alt": "The margin surrounds the rest of the box, and separates it from other boxes.",
          "caption": "The margin surrounds the rest of the box, and separates it from other boxes.",
          "resources": null,
          "instructor_notes": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908012,
          "is_public": true,
          "key": "eaa231a7-26ec-4c27-92e9-0de90d7a9c03",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "RadioQuizAtom",
          "title": "Quiz 4 - The Box Model",
          "updated_at": "2019-10-08T12:25:18.642Z",
          "version": "1.0.0",
          "question": {
            "prompt": "What is the difference between the margin and padding properties?",
            "correct_feedback": "Correct!",
            "video_feedback": null,
            "default_feedback": "",
            "answers": [
              {
                "id": "rbk1",
                "text": "margin adds a line around an element, padding adds space inside of an element",
                "is_correct": false,
                "incorrect_feedback": "Oops! Something else adds a line around an element."
              },
              {
                "id": "rbk2",
                "text": "margin adds space inside an element, padding adds space around an element",
                "is_correct": false,
                "incorrect_feedback": "Not quite! Margin is considered to be outside the element itself (separated by the border)."
              },
              {
                "id": "rbk3",
                "text": "margin adds space around an element, padding adds space inside of an element",
                "is_correct": true,
                "incorrect_feedback": "Correct!"
              },
              {
                "id": "rbk4",
                "text": "margin adds space around and inside of an element, padding only adds space inside of an element",
                "is_correct": false,
                "incorrect_feedback": "Not quite! Margin is considered to be outside the element itself (separated by the border)."
              }
            ]
          }
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908055,
      "is_public": true,
      "key": "fb4f8251-0daa-42c7-9e7d-8051a3903c72",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Exercise: The Box Model",
      "updated_at": "2019-10-08T12:25:20.459Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        908033,
        908082
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908033,
          "is_public": true,
          "key": "61f71e3b-feb5-4f98-a225-5048b4d9f9c0",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Instructions",
          "updated_at": "2019-10-08T12:25:19.452Z",
          "version": "1.0.0",
          "text": "# Exercise: The Box Model\n\nYou have just learned the four elements the browser needs in order to render a box model. Thankfully, with CSS, you can control each of them individually.\n\nUnderstanding the CSS Box Model is crucial to being able to correctly layout a webpage.\n\n#### See it with your own eyes\n\nWanna see every single \"box\" that makes up a page? Try putting this in the stylesheet temporarily:\n\n```css\n* {\n  border: 1px solid red !important;\n}\n```\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 908082,
          "is_public": true,
          "key": "0e5d4102-99cc-4bb5-b67a-f6c578927ab3",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "WorkspaceAtom",
          "title": null,
          "updated_at": "2019-10-08T12:25:20.043Z",
          "version": "1.0.0",
          "pool_id": "webterminal",
          "workspace_id": "r179038c908055xHTMLLIVEcdy792m4",
          "view_id": "html-live-47fed",
          "gpu_capable": false,
          "name": "css-box-model",
          "configuration": {
            "id": "reserved",
            "blueprint": {
              "conf": {
                "disk": null,
                "openFiles": [
                  "/home/workspace/index.html"
                ],
                "showFiles": true,
                "allowClose": true,
                "showEditor": true,
                "allowSubmit": false,
                "autoRefresh": true,
                "previewFile": "/home/workspace/index.html"
              },
              "kind": "html-live"
            },
            "workspaceId": "reserved"
          },
          "starter_files": null
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908059,
      "is_public": true,
      "key": "01a92a2f-23a7-4fe3-b133-291a36341ac1",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Display and Positioning: Inline & Block",
      "updated_at": "2019-10-08T12:25:23.172Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        907998,
        908043,
        908037,
        908016,
        908083
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 907998,
          "is_public": true,
          "key": "291ca132-3e07-4b33-8e11-c8c86aaff36e",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Display and Positioning Heading",
          "updated_at": "2019-10-08T12:25:20.867Z",
          "version": "1.0.0",
          "text": "# Display and Positioning: Inline & Block",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908043,
          "is_public": true,
          "key": "6842bd15-a442-4a35-bf55-189ea6c57582",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "ND001 C01 L02 06 Display And Positioning",
          "updated_at": "2019-10-08T12:25:21.219Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "101791",
            "youtube_id": "656lq2mIz7Y",
            "topher_id": "d55231f2-de5d-11e9-8d55-0242ac11001f",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2019/September/5d895bcc_nd001-c01-l02-06-display-and-positioning/nd001-c01-l02-06-display-and-positioning_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2019/September/5d895bcc_nd001-c01-l02-06-display-and-positioning/nd001-c01-l02-06-display-and-positioning_480p_1000kbps.mp4",
              "uri_480p_ogg": null,
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2019/September/5d895bcc_nd001-c01-l02-06-display-and-positioning/nd001-c01-l02-06-display-and-positioning_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2019/September/5d895bcc_nd001-c01-l02-06-display-and-positioning/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908037,
          "is_public": true,
          "key": "3868d7ab-7e6c-4fb7-8f9b-33a4945b4026",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Inline vs Block",
          "updated_at": "2019-10-08T12:25:21.945Z",
          "version": "1.0.0",
          "text": "The biggest distinction between outside display options is whether elements occupy the entire horizontal line they are on (remember that elements are organized hierarchically on the DOM) or if they only occupy the width they need and then the following element can be placed next to them on the same horizontal line.\n\nImagine there were two elements with the class box created with HTML like this:\n\n```\n<div class=”box”>Box 1</div>\n<div class=”box”>Box 2</div>\n```\n\nIn the CSS code if we set the `box` class display property to `block`, each rectangle would take up its own line and would be positioned one on top of the other. However, if we set the `display` property to `inline-block`, the rectangles would be displayed side by side on the same line. Here is what the CSS could look like:\n```\n.box{\n  display: inline-block;\n}\n```\n\nThe value `inline` is most often used to highlight specific text within a larger text element, `span` elements are a common example. Elements set to `inline` display have no width or height and only occupy the space that their text property (or `.innerHTML` property) takes up. So in our `box` class example above, the rectangles would display on the same line but only occupy as much space as their text needs to display.\n\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908016,
          "is_public": true,
          "key": "b3157d3c-2754-47f4-8dc4-03ccfdd795fa",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Exercise: Inline vs Block Instructions",
          "updated_at": "2019-10-08T12:25:22.397Z",
          "version": "1.0.0",
          "text": "### Exercise: Inline-block vs. Block\n\nUse the workspace provided to test out different `display` values for the `box` class.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 908083,
          "is_public": true,
          "key": "7475ab68-09cb-46d5-a23e-cd8397907f05",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "WorkspaceAtom",
          "title": null,
          "updated_at": "2019-10-08T12:25:22.857Z",
          "version": "1.0.0",
          "pool_id": "webterminal",
          "workspace_id": "r179038c908059xHTMLLIVEj47gzuiy",
          "view_id": "html-live-ju604",
          "gpu_capable": false,
          "name": "css-display-inline-block",
          "configuration": {
            "id": "reserved",
            "blueprint": {
              "conf": {
                "disk": null,
                "openFiles": [
                  "/home/workspace/index.html"
                ],
                "showFiles": true,
                "allowClose": true,
                "showEditor": true,
                "allowSubmit": false,
                "autoRefresh": true,
                "previewFile": "/home/workspace/index.html"
              },
              "kind": "html-live"
            },
            "workspaceId": "reserved"
          },
          "starter_files": null
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908052,
      "is_public": true,
      "key": "f6c8a7a1-c1f7-42a6-9319-110427324edb",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Display and Positioning: Z-index",
      "updated_at": "2019-10-08T12:25:24.827Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        908014,
        908010,
        908084
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908014,
          "is_public": true,
          "key": "effae5b5-4615-402a-8f3a-2b54108a76d3",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Z-index",
          "updated_at": "2019-10-08T12:25:23.655Z",
          "version": "1.0.0",
          "text": "# Display and Positioning: Z-index\n\nWhen elements overlap, they are ordered on the z-axis (i.e., which element covers another). The z-index CSS property can be used to specify the z-order of these overlapping elements. Overlapping elements with a larger z-index cover those with a smaller one.\n\nElements may overlap for a number of reasons; for instance, elements positioned absolutely, or elements with negative values set for their `margin` property. In these instances we need a way to determine which element should be displayed on top. Without explicitly using `z-index` the last element written to the DOM (the last element you wrote in your code) will appear on top of all the others, and so on up the chain of your elements.\n\nAs an example, let’s say we had two rectangles, positioned absolutely and overlapping each other-- the code for that could look like this:\n\n```\n<style>\n.box {\n  width: 200px;\n   height: 200px;\n  position: absolute;\n}\n\n#one {\n  background: red;\n  top: 100px;\n  left: 150px;\n}\n\n#two {\n  background: yellow;\n  top: 80px;\n  left: 100px;\n}\n</style>\n\n<html>\n  <div id=”one” class =”box”> Box One </div>\n  <div id=”two” class =”box”> Box Two </div>\n</html>\n```\n\nBy default, the element with the id `two` would be displayed on top because it comes after element `one` in the code. However, if we wanted to display the first element on top we could use `z-index`, by giving each of the elements a numeric value for `z-index` and making sure that the value for element `one` is higher. The updated CSS could look like this:\n\n```\n#one {\n  background: red;\n  top: 100px;\n  left: 150px;\n  z-index:1;\n}\n\n#two {\n  background: yellow;\n  top: 80px;\n  left: 100px;\n  z-index: -1;\n}\n```\n\nNotice that element `one` has been given a `z-index` value of `1`, and element `two` has been given a `z-index` value of `-1`. If more elements were involved we could use a wider range of values and the same rules would apply-- so that an element with `z-index` 100 would be displayed above an element with a `z-index` value of 99, and below.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908010,
          "is_public": true,
          "key": "13341057-2bc9-449b-b481-b74a8d0d01f1",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Exercise: Z-Index Instructions",
          "updated_at": "2019-10-08T12:25:23.963Z",
          "version": "1.0.0",
          "text": "### Exercise: Z-Index\n\nIn the workspace provided, change the `z-index` values so that div `one` is on top, followed by div `two` and then div `three` on the bottom.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 908084,
          "is_public": true,
          "key": "60e50717-0860-4b60-8f78-e77d946d8845",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "WorkspaceAtom",
          "title": null,
          "updated_at": "2019-10-08T12:25:24.521Z",
          "version": "1.0.0",
          "pool_id": "webterminal",
          "workspace_id": "r179038c908052xHTMLLIVEg7pv7qa0",
          "view_id": "html-live-zrgm1",
          "gpu_capable": false,
          "name": "css-z-index",
          "configuration": {
            "id": "reserved",
            "blueprint": {
              "conf": {
                "disk": null,
                "openFiles": [
                  "/home/workspace/index.html"
                ],
                "showFiles": true,
                "allowClose": true,
                "showEditor": true,
                "allowSubmit": false,
                "autoRefresh": true,
                "previewFile": "/home/workspace/index.html"
              },
              "kind": "html-live"
            },
            "workspaceId": "reserved"
          },
          "starter_files": null
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908062,
      "is_public": true,
      "key": "171edeab-284a-4618-842b-f44d1708762d",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Absolute & Relative Units",
      "updated_at": "2019-10-08T12:25:25.738Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        908045
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908045,
          "is_public": true,
          "key": "ed8d5680-142a-42f3-83ed-1ed74d0117c9",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Absolute vs Relative Units",
          "updated_at": "2019-10-08T12:25:25.414Z",
          "version": "1.0.0",
          "text": "# Absolute vs Relative Units\n\nMany CSS properties require a unit of measurement. There’s a lot of units available, but the most common ones you’ll encounter are `px` (pixel) and `em` (pronounced like the letter m). The former is what you would intuitively call a pixel, regardless of whether the user has a retina display or not, and the latter is the current font size of the element in question.\n\nThere are broadly two types of units of measurement for CSS properties, absolute and relative.\n\n**Absolute**\n\n- `px`\n- `in`\n- `mm`\n- `cm`\n\nAbsolute measurements are set values regardless of anything having to do with your program or the browser. `px` is the most common absolute unit of measurement, and many font sizes on the web for example, are set to somewhere between 12px-30px, A font size set to `16px` will appear the same size no matter how big the screen. If however, you wanted to set a CSS property value based on some dynamic value, the width of a browser window for example, there are also relative units of measurement that can be used to define CSS properties.\n\n**Relative**\n\n- `%` - percentage of something, such as screen width\n- `em` - A unit equivalent to the current font size - if 12px font, 2em would be 24px\n- `vw` - units of viewport width (essentially the browser’s rendering space). Each unit is 1/100th of width\n- `vh` - the same as above but for viewport height\n\nThe em unit is very useful for defining sizes relative to some base font. For example, if you set the `font-size` of  `body` to `16px`, you could then set other element’s `font-size` value relative to that `16px`. Here’s what that could look like:\n```\nbody {\n font-size: 16px;\n}\n\n#one {\n  font-size: 1.5em\n}\n\n#two {\n  font-size: 0.5em\n}\n```\n\nIn this example, `one` would have font bigger than 16px, and `two` would have font smaller than 16px.",
          "instructor_notes": "",
          "resources": null
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908054,
      "is_public": true,
      "key": "07960032-2e83-49d6-8ca6-093093925707",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Typography",
      "updated_at": "2019-10-08T12:25:30.347Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        908006,
        908011,
        908027,
        908004,
        908026,
        908009,
        908022,
        908003
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908006,
          "is_public": true,
          "key": "0c06d5f0-4296-4315-86eb-d041a332838b",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Typography Heading",
          "updated_at": "2019-10-08T12:25:26.070Z",
          "version": "1.0.0",
          "text": "# Typography",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908011,
          "is_public": true,
          "key": "25bd26c7-6fda-4bb2-af48-0a0e8aa01618",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "ND001 C01 L02 06 Typography With CSS",
          "updated_at": "2019-10-08T12:25:26.504Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "100466",
            "youtube_id": "jggV5PucL1A",
            "topher_id": "84e1d714-d4a2-11e9-9e51-c3c5000cb297",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2de2_nd001-c01-l02-06-typography-with-css/nd001-c01-l02-06-typography-with-css_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2de2_nd001-c01-l02-06-typography-with-css/nd001-c01-l02-06-typography-with-css_480p_1000kbps.mp4",
              "uri_480p_ogg": null,
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2de2_nd001-c01-l02-06-typography-with-css/nd001-c01-l02-06-typography-with-css_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2019/August/5d4a2de2_nd001-c01-l02-06-typography-with-css/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908027,
          "is_public": true,
          "key": "b21ea280-b6b9-4f31-a59b-0b72950dbfee",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Text alignment",
          "updated_at": "2019-10-08T12:25:26.906Z",
          "version": "1.0.0",
          "text": "### Text alignment\n\nThe aptly named text-align property defines the alignment of the text in an HTML element.\n\n```css\np {\n  text-align: left;\n}\n```\n\nOther accepted values are right, center, or justify.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908004,
          "is_public": true,
          "key": "668c9b65-8c83-4540-8f00-73619dc6daba",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "Quiz 8 - Text alignment",
          "updated_at": "2019-10-08T12:25:27.254Z",
          "version": "1.0.0",
          "question": {
            "prompt": "Which HTML elements will the following CSS statement be applied to?\n\n```css\n.has-text-centered {\n  text-align: center;\n}\n```\n",
            "correct_feedback": "Correct! The CSS statement will be applied to those elements!",
            "video_feedback": null,
            "default_feedback": "Make sure to check the class name carefully.  Does it exactly match the selector?",
            "answers": [
              {
                "id": "rbk1",
                "text": "`<div class=\"has-text-centered\">`",
                "is_correct": true,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk2",
                "text": "`<a href=\"#\" class=\"has-text-centered\">`",
                "is_correct": true,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk3",
                "text": "`<button class=\"has-txt-centered\">`",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk4",
                "text": "`<p class=\"has-text-centered has-text-primary is-size-5\">`",
                "is_correct": true,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk5",
                "text": "`<div class=\"has-text-centered-justified\">`",
                "is_correct": false,
                "incorrect_feedback": ""
              }
            ]
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908026,
          "is_public": true,
          "key": "79a78ead-7875-412c-aabf-95c40ed37e3d",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Underlined Text",
          "updated_at": "2019-10-08T12:25:27.577Z",
          "version": "1.0.0",
          "text": "### Underlined Text\n\nThe text-decoration property determines whether text is underlined or not. By setting it to none, we can remove the default underline from all of our links. We’ll discuss link styles in-depth later on.\n\n```css\na {\n  text-decoration: none;\n}\n```\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908009,
          "is_public": true,
          "key": "68eb0fdd-0df3-4890-81e8-b93d4d7d40af",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Deleted Text",
          "updated_at": "2019-10-08T12:25:27.934Z",
          "version": "1.0.0",
          "text": "### Deleted Text\n\nThe other common value for text-decoration is line-through to strike out “deleted” text. But, remember that meaning should always be conveyed through HTML—not CSS. It’s better to use the `<ins>` and `<del>` elements instead of adding a line-through style to, say, an ordinary `<p>` element.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908022,
          "is_public": true,
          "key": "6f376b22-df4d-493c-86ad-e8afab7cfa87",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Line Height",
          "updated_at": "2019-10-08T12:25:29.569Z",
          "version": "1.0.0",
          "text": "### Line Height\n\nJust as alignment isn’t an arbitrary decision, neither is the space between text. In this section, we’re concerned with the responsible use of three CSS properties:\n\n- `margin-top` (or `padding-top`)\n- `margin-bottom` (or `padding-bottom`)\n- `line-height`\n\nThe first two should be pretty familiar by now, and they define the vertical space between separate paragraphs. The new `line-height` property determines the amount of space between lines in the same paragraph. In traditional typography, `line-height` is called “leading” because printers used little strips of lead to increase the space between lines of text.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908003,
          "is_public": true,
          "key": "1c105061-4a99-4306-b662-2544295015c8",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "RadioQuizAtom",
          "title": "Quiz 9 - Line Height",
          "updated_at": "2019-10-08T12:25:30.048Z",
          "version": "1.0.0",
          "question": {
            "prompt": "What is the line-height property used for?\n",
            "correct_feedback": "Well done!",
            "video_feedback": null,
            "default_feedback": "Not quite! Line-height controls the space between lines of content.",
            "answers": [
              {
                "id": "rbk1",
                "text": "controls height of space between paragraph element",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk2",
                "text": "controls height of the character size",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk3",
                "text": "controls width of space between characters",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk4",
                "text": "controls height of space between two lines of content",
                "is_correct": true,
                "incorrect_feedback": ""
              }
            ]
          }
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908063,
      "is_public": true,
      "key": "a225edc8-7556-4ac0-a17f-d5082e443e3c",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Fonts",
      "updated_at": "2019-10-08T12:25:32.863Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        908020,
        908034,
        908018,
        908049,
        908024
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908020,
          "is_public": true,
          "key": "1fa0b5f9-b872-4980-8be9-26cd7e0dd607",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Fonts Heading",
          "updated_at": "2019-10-08T12:25:30.708Z",
          "version": "1.0.0",
          "text": "# Fonts",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908034,
          "is_public": true,
          "key": "c2c5f20b-95e8-4818-9d6b-046f1c75f9b2",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Font Family",
          "updated_at": "2019-10-08T12:25:31.191Z",
          "version": "1.0.0",
          "text": "### Font Family\n\n`font-family` is another built-in CSS property that defines the typeface for whatever element you selected. It accepts multiple values because not all users will have the same fonts installed.\n\nWhen using fonts on the web, you must first consider what fonts are available to your users. Every operating system, be it Windows, OS X, or Linux, comes with a set of pre-installed fonts that you can use for customizing your website. For a complete list of \"web-safe\" fonts, follow [this link](https://web.mit.edu/jmorzins/www/fonts.html).\n\nThe way it works is fairly simple. When using the font-family property, you specify the font(s) you want to use in your HTML.\n\nThen, the browser, starting from left to right, looks at the font(s) you've specified and checks to see if it can render the text using the font(s) you've provided. If it can't use the first font, then the browser moves to the next font, and so-on.\n\nThe purpose for specifying multiple fonts is because not all fonts are available on every operating system. So, specifying multiple, similar fonts ensures users have a consistent experience regardless of the operating system they are using.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908018,
          "is_public": true,
          "key": "38607496-1fec-492e-ae6d-4fbabe7a131b",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Font Weight & Style",
          "updated_at": "2019-10-08T12:25:31.803Z",
          "version": "1.0.0",
          "text": "### Font Weight & Style\n\nIn CSS, font weights are expressed as numeric values between 100 and 900. Fortunately, there are relatively standardized, human-friendly terms for each of these numeric values. “Black” usually means 900, “bold” is 700, “regular” is 400, etc. Most families don’t supply a face for every single weight. For example, Roboto is missing “extra light” (200), “semi bold” (600), and “extra bold” (800).\n\nIt’s worth noting that each style and weight combination is designed as an entirely distinct face. In a high-quality font family, the condensed styles aren’t simply squashed versions of the roman faces, nor is the bold face merely a thicker version. Each letter in every face is hand-crafted to ensure it provides a uniform flow to its text.\n\nThis is particularly apparent in the italic and roman faces of many serif fonts. For instance, the lowercase “a” in Century Schoolbook FS (the font you’re reading right now) takes on a completely different shape when it’s italicized.\n\n#### Emphasis & Importance\n\nFor emphasized (usually italics) words, use the `<em>` tag.\n```html\n<p>\n  We <em>have</em> to buy the latest version of the pet hair remover vacuum, the\n  floor is covered with fur!\n</p>\n```\nWhich results in:\n<p>\n  We <em>have</em> to buy the latest version of the pet hair remover vacuum, the\n  floor is covered with fur!\n</p>\n\nFor important words, use the `<strong>` tag. By default, `<strong>` elements are displayed in bold, but keep in mind that it is only the browser’s default behavior. Don’t use `<strong>` only to put some text in bold, but rather to give it more importance.\n\n```\n<p>\n  My dog is the most <strong>important</strong> creature in my life right now.\n</p>\n```",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908049,
          "is_public": true,
          "key": "3a6808e7-10b5-437a-80b8-6d0ac9185230",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Externally Hosted Fonts",
          "updated_at": "2019-10-08T12:25:32.172Z",
          "version": "1.0.0",
          "text": "## External Fonts\n\nThere are a number of ways to host fonts from external sources. One commonly used example is [Google Fonts](https://fonts.google.com/), which provides a great number of fonts free for use in web projects. If you go to the Google Fonts website linked below, you can select a font and then you will be provided with the line of code to link your font of choice. That link goes in the `head` section of your code like this: \n\n```\n<head>\n  <link href=\"https://fonts.googleapis.com/css?family=Montserrat&display=swap\" rel=\"stylesheet\">\n</head>\n```\n\nIn the CSS portion of your code, you could then set an elements property like this:\n\n```\n.box{\n  font-family: 'Montserrat', sans-serif;\n}\n```\n\nIn this example the Google font I selected was ‘Montserrat’.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908024,
          "is_public": true,
          "key": "e5ba2fa2-27bb-431f-baa6-7413ea7a157e",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": "Externally Hosted Fonts",
          "updated_at": "2019-10-08T12:25:32.556Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2019/August/5d4b3995_css-fonts/css-fonts.png",
          "width": 580,
          "height": 500,
          "alt": "An example of using local fonts vs externally hosted fonts.",
          "caption": "An example of using local fonts vs externally hosted fonts.",
          "resources": null,
          "instructor_notes": null
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908064,
      "is_public": true,
      "key": "15ef757e-f5d2-4b76-ba03-c673eebef705",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Colors",
      "updated_at": "2019-10-08T12:25:40.507Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        908032,
        908008,
        908038,
        908028,
        908046,
        908048,
        908017
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908032,
          "is_public": true,
          "key": "132510e3-4429-4463-9b99-e8c22e2de69d",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Colors Heading",
          "updated_at": "2019-10-08T12:25:33.134Z",
          "version": "1.0.0",
          "text": "# Colors",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908008,
          "is_public": true,
          "key": "e1104c32-e6ce-4163-89f5-68a323b10e5e",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Adding in colors",
          "updated_at": "2019-10-08T12:25:33.434Z",
          "version": "1.0.0",
          "text": "Colors in CSS can be specified by the following methods:\n\n1. Hexadecimal colors\n2. RGB colors\n3. Predefined/Cross-browser color names\n4. RGBA colors\n5. HSL colors\n6. HSLA colors\n\nLet's talk about the first 3 since those are the most common.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908038,
          "is_public": true,
          "key": "dd74f466-5268-43c6-b057-78cde26914d0",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Hexadecimal colors",
          "updated_at": "2019-10-08T12:25:33.806Z",
          "version": "1.0.0",
          "text": "### Hexadecimal Colors\n\nA hexadecimal color is specified with: `#RRGGBB`, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color. All values must be between 00 and FF.\n\nFor example, the `#0000ff` value is rendered as blue, because the blue component is set to its highest value (ff) and the others are set to 00.\n\n#### Example\n\nDefine different HEX colors:\n\n```css\n#p1 {\n  background-color: #ff0000;\n}\n\n#p2 {\n  background-color: #00ff00;\n}\n\n#p3 {\n  background-color: #0000ff;\n}\n```\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908028,
          "is_public": true,
          "key": "f09768db-ac4b-46dc-ab09-51b3700c99a6",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "RBG colors",
          "updated_at": "2019-10-08T12:25:34.245Z",
          "version": "1.0.0",
          "text": "## RGB Colors\n\nAn RGB color value is specified with the `rgb()` function, which has the following syntax:\n\n`rgb(red, green, blue)`\n\nEach parameter (red, green, and blue) defines the intensity of the color and can be an integer between 0 and 255 or a percentage value (from 0% to 100%).\n\nFor example, the `rgb(0,0,255)` value is rendered as blue, because the blue parameter is set to its highest value (255) and the others are set to 0.\n\nAlso, the following values define equal color: `rgb(0,0,255)` and `rgb(0%,0%,100%)`.\n\n#### Example\n\nDefine different RGB colors:\n\n```css\n#p1 {\n  background-color: rgb(255, 0, 0);\n}\n\n#p2 {\n  background-color: rgb(0, 255, 0);\n}\n\n#p3 {\n  background-color: rgb(0, 0, 255);\n}\n```\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908046,
          "is_public": true,
          "key": "e46fcb0c-c505-42a8-8ff3-23c23a4855f2",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Predefined colors",
          "updated_at": "2019-10-08T12:25:34.604Z",
          "version": "1.0.0",
          "text": "### Predefined/Cross-browser Color Names\n\n140 color names are predefined in the HTML and CSS color specification.\n\nThere's quite a few of these - check out [this list](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) to see more.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908048,
          "is_public": true,
          "key": "f472231e-07dc-40f9-97b2-3840021dd0a3",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "RadioQuizAtom",
          "title": "Quiz 10 - Color Values",
          "updated_at": "2019-10-08T12:25:35.020Z",
          "version": "1.0.0",
          "question": {
            "prompt": "Which of the following values is not valid in CSS when defining a color?\n",
            "correct_feedback": "Correct!",
            "video_feedback": null,
            "default_feedback": "Make sure you check the syntax.",
            "answers": [
              {
                "id": "rbk1",
                "text": "`color: #FFF;`",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk2",
                "text": "`color: rgb(255, 255, 255);`",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk3",
                "text": "`color: #FFFFFF;`",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk4",
                "text": "`color: FFFFFF;`",
                "is_correct": true,
                "incorrect_feedback": ""
              }
            ]
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908017,
          "is_public": true,
          "key": "3c58c77c-4075-4900-95e1-ac8326f2f1aa",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "Quiz 11 - Color Values",
          "updated_at": "2019-10-08T12:25:36.004Z",
          "version": "1.0.0",
          "question": {
            "prompt": "Which CSS declarations can be used to represent the standard color for blue?",
            "correct_feedback": "Great Job! The color blue can be expressed with those declarations!",
            "video_feedback": null,
            "default_feedback": "Three of these can represent the standard color for blue - use an internet search if you still aren’t sure!",
            "answers": [
              {
                "id": "rbk1",
                "text": "`color: #ff0000;`",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk2",
                "text": "`color: blue;`",
                "is_correct": true,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk3",
                "text": "`color: rgb(0, 0, 255);`",
                "is_correct": true,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk4",
                "text": "`color: #ffff00;`",
                "is_correct": false,
                "incorrect_feedback": ""
              },
              {
                "id": "rbk5",
                "text": "`color: #00f;`",
                "is_correct": true,
                "incorrect_feedback": ""
              }
            ]
          }
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908061,
      "is_public": true,
      "key": "b9b6df8c-4462-4c79-ab48-3b0a528dea58",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Exercise: Debugging CSS",
      "updated_at": "2019-10-08T12:25:42.858Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        908036,
        908042,
        908047,
        908025,
        908085
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908036,
          "is_public": true,
          "key": "6a63fd41-9551-4617-ba36-25c44edaa6fc",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Debugging CSS",
          "updated_at": "2019-10-08T12:25:40.961Z",
          "version": "1.0.0",
          "text": "# Debugging CSS",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908042,
          "is_public": true,
          "key": "a97fe566-2013-41cb-bffa-c7e52e112719",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "ND001 C01 L02 07 Debugging CSS",
          "updated_at": "2019-10-08T12:25:41.284Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "100467",
            "youtube_id": "ynVhMKnuLos",
            "topher_id": "84e1fbd6-d4a2-11e9-9ebf-bfd34cd459fa",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2de8_nd001-c01-l02-07-debugging-css/nd001-c01-l02-07-debugging-css_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2de8_nd001-c01-l02-07-debugging-css/nd001-c01-l02-07-debugging-css_480p_1000kbps.mp4",
              "uri_480p_ogg": null,
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2de8_nd001-c01-l02-07-debugging-css/nd001-c01-l02-07-debugging-css_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2019/August/5d4a2de8_nd001-c01-l02-07-debugging-css/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908047,
          "is_public": true,
          "key": "8279e48a-18eb-4274-84ad-5cfd98ebe4a8",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Debugging CSS Recap",
          "updated_at": "2019-10-08T12:25:41.746Z",
          "version": "1.0.0",
          "text": "Debugging CSS is an important skill to practice because you will have to be able to discover and resolve CSS issues with your own eyes! So let’s get to practicing! ",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908025,
          "is_public": true,
          "key": "442c2ac8-7bd7-4bf8-9831-6ca887b1447c",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Exercise: Debugging CSS Instructions",
          "updated_at": "2019-10-08T12:25:42.194Z",
          "version": "1.0.0",
          "text": "### Exercise: Debugging CSS\n\nThe CSS code in the `<style>` tags below has a number of bugs in it. Find them and squash them by fixing each of the errors to get the CSS displaying properly in the browser. ",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 908085,
          "is_public": true,
          "key": "8bf701bf-eff6-4ddc-87e7-9683ae280b95",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "WorkspaceAtom",
          "title": null,
          "updated_at": "2019-10-08T12:25:42.509Z",
          "version": "1.0.0",
          "pool_id": "webterminal",
          "workspace_id": "r179038c908061xHTMLLIVEtelqqckd",
          "view_id": "html-live-1e0s1",
          "gpu_capable": false,
          "name": "css-debugging-css",
          "configuration": {
            "id": "reserved",
            "blueprint": {
              "conf": {
                "disk": null,
                "openFiles": [
                  "/home/workspace/index.html"
                ],
                "showFiles": true,
                "allowClose": true,
                "showEditor": true,
                "allowSubmit": false,
                "autoRefresh": true,
                "previewFile": "/home/workspace/index.html"
              },
              "kind": "html-live"
            },
            "workspaceId": "reserved"
          },
          "starter_files": null
        }
      ]
    },
    {
      "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
      "id": 908060,
      "is_public": true,
      "key": "3e7ac724-ee37-42b0-bcad-e4f8d9360d46",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Recap",
      "updated_at": "2019-10-08T12:25:46.794Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        908035,
        908023,
        908030
      ],
      "atoms": [
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908035,
          "is_public": true,
          "key": "2d070ae8-4f51-4076-8715-55354bf3c277",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Recap",
          "updated_at": "2019-10-08T12:25:44.478Z",
          "version": "1.0.0",
          "text": "# Recap",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908023,
          "is_public": true,
          "key": "44f3cd59-0d52-47d9-b263-605785c7c521",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "ND001 C01 L02 08 Recap",
          "updated_at": "2019-10-08T12:25:46.114Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "100468",
            "youtube_id": "BHk3iakyjvI",
            "topher_id": "84e204be-d4a2-11e9-9edb-87a3caf85c3e",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2df0_nd001-c01-l02-08-recap/nd001-c01-l02-08-recap_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2df0_nd001-c01-l02-08-recap/nd001-c01-l02-08-recap_480p_1000kbps.mp4",
              "uri_480p_ogg": null,
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2019/August/5d4a2df0_nd001-c01-l02-08-recap/nd001-c01-l02-08-recap_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2019/August/5d4a2df0_nd001-c01-l02-08-recap/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": "https://docs.google.com/a/udacity.com/open?id=1aoN96e6qaqDF-F-1kCuNoSe_8wBWCl05t8C6gF5CMM4",
          "id": 908030,
          "is_public": true,
          "key": "424ac04d-5557-40a3-a061-8565cd5040fb",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": "Additional Topics Further Research",
          "updated_at": "2019-10-08T12:25:46.427Z",
          "version": "1.0.0",
          "text": "## Additional Topics on CSS\n\nFor more information on CSS background images, see the [MDN documentation here](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image).\n\nFor more information on CSS in general, you can see the excellent website [CSS-Tricks](https://css-tricks.com/).",
          "instructor_notes": "",
          "resources": null
        }
      ]
    }
  ]
}