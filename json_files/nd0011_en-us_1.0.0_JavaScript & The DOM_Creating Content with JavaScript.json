{
  "content_source": null,
  "id": 467126,
  "is_public": true,
  "key": "39d760cf-9593-420d-9a97-57bff31e29c1",
  "locale": "en-us",
  "root_owner_id": null,
  "semantic_type": "Lesson",
  "title": "Creating Content with JavaScript",
  "updated_at": "2019-10-27T12:11:17.398Z",
  "version": "1.0.0",
  "image": {
    "url": "https://s3.amazonaws.com/video.udacity-data.com/topher/2018/January/5a62790b_2-creating-content-with-javascript2x/2-creating-content-with-javascript2x.jpg",
    "width": 500,
    "height": 500
  },
  "video": null,
  "lab": null,
  "project": null,
  "summary": "Static is boring, so we'll use JavaScript and DOM methods to create new page content, update existing content, and delete content. You'll also learn how to check and set the styling of page elements.",
  "lesson_type": "Classroom",
  "duration": 120,
  "display_workspace_project_only": null,
  "is_project_lesson": false,
  "career_portal_experience_levels": [],
  "_concepts_ids": [
    467399,
    467400,
    467401,
    467402,
    467403,
    467404
  ],
  "_project_id": null,
  "concepts": [
    {
      "content_source": null,
      "id": 467399,
      "is_public": true,
      "key": "24b00792-38d0-4d61-acc9-eb1422fcc284",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Introduction",
      "updated_at": "2019-10-08T12:33:10.542Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        478533,
        467522,
        467523,
        478423,
        467525
      ],
      "atoms": [
        {
          "content_source": null,
          "id": 478533,
          "is_public": true,
          "key": "8671db9e-8354-417e-9802-0fb58d875cc1",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "L2 1 - Lesson Overview V2",
          "updated_at": "2019-10-08T12:33:08.630Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69704",
            "youtube_id": "leMPNA8okHk",
            "topher_id": "84f25aee-d4a2-11e9-b2d0-63545a6d5a3d",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b07d_l2-1-lesson-overview-v2/l2-1-lesson-overview-v2_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b07d_l2-1-lesson-overview-v2/l2-1-lesson-overview-v2_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a31b07d_l2-1-lesson-overview-v2/l2-1-lesson-overview-v2_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b07d_l2-1-lesson-overview-v2/l2-1-lesson-overview-v2_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a31b07d_l2-1-lesson-overview-v2/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467522,
          "is_public": true,
          "key": "da24d607-da98-432b-9e5f-43432ad2c0bc",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:09.005Z",
          "version": "1.0.0",
          "text": "## Need to Know\n\nTo be successful in this section, there are a couple of things from the previous section that you need to know. You need to have a solid grasp of selecting DOM elements using:\n\n* `document.getElementById()`\n* `document.querySelector()`\n\nAlso, remember the Node Interface and the Element interface we went over in the previous section? Understanding how an interface determines the properties and methods for an element _and_ understanding how to research an interface's properties and methods will be vital in this lesson.\n\nIf you get stuck, just jump back to the previous section that's giving you a bit of trouble.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467523,
          "is_public": true,
          "key": "1815f6f9-9ea6-4487-a0b1-3731c4968fcc",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:09.359Z",
          "version": "1.0.0",
          "text": "## Project Repository\n\nThroughout this course, you'll learn skills and techniques to access and modify page content. There's no better way to demonstrate these skills than through trying them out on a real website! So I've created a copy of _just_ the Udacity homepage. The project is on GitHub, so please clone the project to your local so that you can follow along.\n\nProject repository: [https://github.com/udacity/course-JS-and-the-DOM](https://github.com/udacity/course-JS-and-the-DOM)\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478423,
          "is_public": true,
          "key": "0b83d097-b359-450a-8b2e-6bb75ee00a29",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 04 - Project Walkthrough",
          "updated_at": "2019-10-08T12:33:09.747Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69611",
            "youtube_id": "-dHH1fP2YWE",
            "topher_id": "84f22614-d4a2-11e9-b23b-3f72b1803df5",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316c9c_dom-l2-04-project-walkthrough/dom-l2-04-project-walkthrough_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316c9c_dom-l2-04-project-walkthrough/dom-l2-04-project-walkthrough_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316c9c_dom-l2-04-project-walkthrough/dom-l2-04-project-walkthrough_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316c9c_dom-l2-04-project-walkthrough/dom-l2-04-project-walkthrough_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316c9c_dom-l2-04-project-walkthrough/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467525,
          "is_public": true,
          "key": "d8acc3c8-9f8e-467e-8fb8-56ae107a45b4",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TaskListAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:10.208Z",
          "version": "1.0.0",
          "tasks": [
            "I have cloned the project",
            "I understand that this project is _just_ the index page of the Udacity site.",
            "I understand that the code in this repo is not representative of how Udacity builds its site. ;-)"
          ],
          "positive_feedback": "Fantastic job!",
          "video_feedback": null,
          "description": ""
        }
      ]
    },
    {
      "content_source": null,
      "id": 467400,
      "is_public": true,
      "key": "c7c27fc1-e611-4b5c-84e3-7d1b0075b45f",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Update Existing Page Content",
      "updated_at": "2019-10-08T12:33:23.033Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        478534,
        467527,
        467528,
        467529,
        467530,
        467531,
        467532,
        478424,
        467534,
        467535,
        467536,
        467537,
        478425,
        467539,
        478426,
        467541,
        467542,
        478427,
        467544,
        478428,
        467546,
        467547,
        467548
      ],
      "atoms": [
        {
          "content_source": null,
          "id": 478534,
          "is_public": true,
          "key": "2c2f5e15-47d7-4447-a9f1-0bd7d15e2279",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "L2 6 - What You'Ll Learn V2",
          "updated_at": "2019-10-08T12:33:11.515Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69705",
            "youtube_id": "J_e_k_e__LM",
            "topher_id": "84f287ee-d4a2-11e9-b35a-af4890533354",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b08e_l2-6-what-youll-learn-v2/l2-6-what-youll-learn-v2_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b08e_l2-6-what-youll-learn-v2/l2-6-what-youll-learn-v2_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a31b08e_l2-6-what-youll-learn-v2/l2-6-what-youll-learn-v2_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b08e_l2-6-what-youll-learn-v2/l2-6-what-youll-learn-v2_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a31b08e_l2-6-what-youll-learn-v2/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467527,
          "is_public": true,
          "key": "c2d907fc-1492-4f1a-820c-000aaacf066a",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:11.932Z",
          "version": "1.0.0",
          "text": "Let's jump right into it. Open up the project in your browser. There's only one HTML file (`index.html`) so this is what it should look like after you open it:",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467528,
          "is_public": true,
          "key": "47c0baa1-2628-4577-a827-bd2294fe1ace",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ImageAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:12.238Z",
          "version": "1.0.0",
          "url": "https://video.udacity-data.com/topher/2017/December/5a22e14b_ud117-l1-project/ud117-l1-project.jpg",
          "width": 1171,
          "height": 871,
          "alt": "A Screenshot of the index page of the Udacity website loaded in a browser.",
          "caption": "_The index page of the Udacity website loaded in a browser._",
          "resources": null,
          "instructor_notes": null
        },
        {
          "content_source": null,
          "id": 467529,
          "is_public": true,
          "key": "ff471376-efd0-4787-9ab4-878ea602d45a",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:12.569Z",
          "version": "1.0.0",
          "text": "> ## 💡Project Code 💡\n> \n> Instructions and a walkthrough of the project were in the previous section. You can clone the project from the GitHub link below. Look back at the previous section to see detailed information about the project and a walkthrough video.\n> \n> Project repository: [https://github.com/udacity/course-JS-and-the-DOM](https://github.com/udacity/course-JS-and-the-DOM)\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467530,
          "is_public": true,
          "key": "b0ea74b0-9b21-4889-9395-271aafad6e95",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ValidatedQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:12.976Z",
          "version": "1.0.0",
          "question": {
            "prompt": "Write the DOM code necessary to select the _first_ element with class: `card`",
            "default_feedback": "Is the correct method being used? Is the method being called with the correct information?",
            "correct_feedback": "Nice work!",
            "video_feedback": null,
            "matchers": [
              {
                "semantic_type": "RegexMatcher",
                "is_correct": true,
                "expression": "document\\.querySelector\\( *['\"]\\.card['\"] *\\);?",
                "expression_description": null,
                "flags": "",
                "incorrect_feedback": null
              },
              {
                "semantic_type": "RegexMatcher",
                "is_correct": true,
                "expression": "document\\.querySelectorAll\\( *['\"]\\.card['\"] *\\)\\[ *0 *\\];?",
                "expression_description": null,
                "flags": "",
                "incorrect_feedback": null
              },
              {
                "semantic_type": "RegexMatcher",
                "is_correct": true,
                "expression": "document\\.getElementsByClassName\\( *['\"]card['\"] *\\)\\[ *0 *\\];?",
                "expression_description": null,
                "flags": "",
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467531,
          "is_public": true,
          "key": "5e1f64b6-7342-4161-ab7f-747c343b33cc",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:13.363Z",
          "version": "1.0.0",
          "text": "Let's store the first `.card` element in a variable for easy access:\n\n```js\nconst nanodegreeCard = document.querySelector('.card');\n```\n\nNow that we've stored the first card element in the `nanodegreeCard` variable, we can use `nanodegreeCard` to refer to this element instead of having to use `document.querySelector('.card')` to select the element every time we need access to it.",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467532,
          "is_public": true,
          "key": "551780ea-a078-4ba7-8909-05add4af189d",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:13.792Z",
          "version": "1.0.0",
          "text": "## An Element's Inner HTML\n\nEvery element inherits properties and methods from the Element Interface (remember this from the previous lesson!). This means that every element has an `.innerHTML` property. This property, as it's rightly named, represents the markup of the element's content. We can use this property to:\n\n* get an element's (and all of its descendants!) HTML content\n* set an element's HTML content\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478424,
          "is_public": true,
          "key": "8aea5f2a-a599-4cbb-a79a-a23ef4ab944c",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 13 - Show InnerHTML",
          "updated_at": "2019-10-08T12:33:14.187Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69612",
            "youtube_id": "go3zrL6BBos",
            "topher_id": "84f225c4-d4a2-11e9-b23a-9f44f456aad5",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316ca7_dom-l2-13-show-innerhtml/dom-l2-13-show-innerhtml_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316ca7_dom-l2-13-show-innerhtml/dom-l2-13-show-innerhtml_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316ca7_dom-l2-13-show-innerhtml/dom-l2-13-show-innerhtml_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316ca7_dom-l2-13-show-innerhtml/dom-l2-13-show-innerhtml_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316ca7_dom-l2-13-show-innerhtml/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467534,
          "is_public": true,
          "key": "a3ff4e08-6e3d-44c5-aba3-acdb8d9a54c5",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:14.660Z",
          "version": "1.0.0",
          "question": {
            "prompt": "What is `.innerHTML`?",
            "correct_feedback": "`.innerHTML` is a property on an element.",
            "video_feedback": null,
            "default_feedback": "That doesn't look right. Where does `.innerHTML` appear on this page: [https://developer.mozilla.org/en-US/docs/Web/API/Element](https://developer.mozilla.org/en-US/docs/Web/API/Element)",
            "answers": [
              {
                "id": "a1512259988329",
                "text": "a property",
                "is_correct": true,
                "incorrect_feedback": null
              },
              {
                "id": "a1512259990707",
                "text": "a method",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512259991591",
                "text": "an element",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512259992275",
                "text": "an interface",
                "is_correct": false,
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467535,
          "is_public": true,
          "key": "9e0a90d1-7bfc-484f-8b97-848d825611af",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:15.176Z",
          "version": "1.0.0",
          "question": {
            "prompt": "What does `.innerHTML` return?",
            "correct_feedback": "If you look at this in the console, it looks like a string. Technically, however, what it returns is called a `DOMString`.",
            "video_feedback": null,
            "default_feedback": "Why don't you look at an element's `.innerHTML` on the console. What does it return?",
            "answers": [
              {
                "id": "a1512260053104",
                "text": "a DOM element",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512260055459",
                "text": "a Node",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512260056041",
                "text": "a string",
                "is_correct": true,
                "incorrect_feedback": null
              },
              {
                "id": "a1512260056604",
                "text": "an array",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512260063167",
                "text": "an object",
                "is_correct": false,
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467536,
          "is_public": true,
          "key": "4d736b46-6a1a-4317-803b-4c14036488d0",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:15.654Z",
          "version": "1.0.0",
          "text": "### 💡 Innie vs Outie 💡\n\nThe `.innerHTML` property sets or returns the HTML content _inside_ the selected element (i.e. between the tags).\n\nThere's also the rarely used `.outerHTML` property. `.outerHTML` represents the HTML element itself, _as well as its children_.\n\n```js\n<h1 id=\"pick-me\">Greetings To <span>All</span>!</h1>\n\nconst innerResults = document.querySelector('#pick-me').innerHTML;\nconsole.log(innerResults); // logs the string: \"Greetings To <span>All</span>!\"\n\nconst outerResults = document.querySelector('#pick-me').outerHTML;\nconsole.log(outerResults); // logs the string: \"<h1 id=\"pick-me\">Greetings To <span>All</span>!</h1>\"\n```\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467537,
          "is_public": true,
          "key": "c80ffec4-7adb-4f39-bbfe-cd4eb70e9c5b",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:16.160Z",
          "version": "1.0.0",
          "text": "## An Element's Text Content\n\nSo `.innerHTML` will get/set an element's _HTML_ content. If we just want the text content, we can use the fantastically named `.textContent` property!\n\nThe `.textContent` property will:\n\n* set the text content of an element and all its descendants\n* return the text content of an element and all its descendants\n\nLet's check it out!",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478425,
          "is_public": true,
          "key": "be51a71d-cc4f-47c6-8835-af53fd1ff668",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 18 - Show-TextContent",
          "updated_at": "2019-10-08T12:33:16.730Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69613",
            "youtube_id": "gcJEMEPVrRI",
            "topher_id": "84f22880-d4a2-11e9-b241-276b355734fc",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cb4_dom-l2-18-show-textcontent/dom-l2-18-show-textcontent_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cb4_dom-l2-18-show-textcontent/dom-l2-18-show-textcontent_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316cb4_dom-l2-18-show-textcontent/dom-l2-18-show-textcontent_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cb4_dom-l2-18-show-textcontent/dom-l2-18-show-textcontent_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316cb4_dom-l2-18-show-textcontent/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467539,
          "is_public": true,
          "key": "e9cbcfa7-17a4-40f0-8983-850a5c324486",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:17.143Z",
          "version": "1.0.0",
          "text": "Check out the `.textContent`'s documentation page on MDN: [textContent docs](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n\nSetting an element's text content is easy, just set it like you would any other property:\n\n```js\nnanodegreeCard.textContent = \"I will be the updated text for the nanodegreeCard element!\";\n```",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478426,
          "is_public": true,
          "key": "e7224244-0cd8-448e-963e-8c562c08c049",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 20 - Setting Content",
          "updated_at": "2019-10-08T12:33:17.665Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69614",
            "youtube_id": "P3DuE86cTiU",
            "topher_id": "84f20d8c-d4a2-11e9-b1f3-0753b9090d73",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cba_dom-l2-20-setting-content/dom-l2-20-setting-content_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cba_dom-l2-20-setting-content/dom-l2-20-setting-content_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316cba_dom-l2-20-setting-content/dom-l2-20-setting-content_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cba_dom-l2-20-setting-content/dom-l2-20-setting-content_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316cba_dom-l2-20-setting-content/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467541,
          "is_public": true,
          "key": "9b7be543-ab8a-4da7-a634-e9cf65d89758",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:18.103Z",
          "version": "1.0.0",
          "question": {
            "prompt": "```html\n<h1 id=\"test\">Ice Cream Flavors</h1>\n```\n\nGiven the HTML above, what will be the `.textContent` value after running this code:\n\n```js\nconst myElement = document.querySelector('#test');\nmyElement.textContent = 'The <strong>Greatest</strong> Ice Cream Flavors';\n```",
            "correct_feedback": "Passing any text that _looks_ like HTML to the `.textContent` property will still be displayed as text. It will _not_ be displayed as HTML when the element is rendered.",
            "video_feedback": null,
            "default_feedback": "That doesn't look correct to me. What does the `.textContent` property do? How is it different from `.innerHTML`?",
            "answers": [
              {
                "id": "a1512260297528",
                "text": "Ice Cream Flavors",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512260302558",
                "text": "The Greatest Ice Cream Flavors",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512260303247",
                "text": "The < strong >Greatest</ strong > Ice Cream Flavors",
                "is_correct": true,
                "incorrect_feedback": null
              },
              {
                "id": "a1512260303861",
                "text": "running this code will cause an error",
                "is_correct": false,
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467542,
          "is_public": true,
          "key": "398c7a14-159e-4a7f-ae47-a347851439f1",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:18.401Z",
          "version": "1.0.0",
          "text": "We just saw that passing text that contains HTML characters to `.textContent` will not display the content as HTML. Instead, it will still display everything as text - even the HTML characters!\n\nIf you'd like to update an element, _including_ its HTML, then you need to use the `.innerHTML` property:\n\n```js\nmyElement.textContent = 'The <strong>Greatest</strong> Ice Cream Flavors'; // doesn't work as expected\n\nmyElement.innerHTML = 'The <strong>Greatest</strong> Ice Cream Flavors';  // works as expected\n```\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478427,
          "is_public": true,
          "key": "5a6d70f6-6c72-4b70-91e5-f152ff7def55",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 23 - TextContent Vs InnerHTML",
          "updated_at": "2019-10-08T12:33:19.322Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69615",
            "youtube_id": "PbT6va8NLbI",
            "topher_id": "8507449a-d4a2-11e9-b6b8-0716fb43a9d8",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cc2_dom-l2-23-textcontent-vs-innerhtml/dom-l2-23-textcontent-vs-innerhtml_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cc2_dom-l2-23-textcontent-vs-innerhtml/dom-l2-23-textcontent-vs-innerhtml_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316cc2_dom-l2-23-textcontent-vs-innerhtml/dom-l2-23-textcontent-vs-innerhtml_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cc2_dom-l2-23-textcontent-vs-innerhtml/dom-l2-23-textcontent-vs-innerhtml_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316cc2_dom-l2-23-textcontent-vs-innerhtml/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467544,
          "is_public": true,
          "key": "0367fefe-1aa8-461e-9d06-b8ed2e9f753a",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:19.642Z",
          "version": "1.0.0",
          "text": "## An Element's Text Content - Version 2!\n\nWe can't close this section out without looking at the `.innerText` property!\n\nLike the `.textContent` property, the `.innerText` property can be used to get/set an element's text content, but there are some important differences between the two properties.\n\n`.textContent` sets/gets the text content of an element...pretty clear and simple.\n\n`.innerText`, on the other hand, is a little tricker. Let's see this in action and then we'll discuss it!\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478428,
          "is_public": true,
          "key": "d0250eca-82d7-444a-a6bb-921c0fdb32bd",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 25 - Demo-InnerText",
          "updated_at": "2019-10-08T12:33:20.025Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69616",
            "youtube_id": "x_F1R-VGxeE",
            "topher_id": "84f20d0a-d4a2-11e9-b1f1-170b5dcd0182",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cd0_dom-l2-25-demo-innertext/dom-l2-25-demo-innertext_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cd0_dom-l2-25-demo-innertext/dom-l2-25-demo-innertext_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316cd0_dom-l2-25-demo-innertext/dom-l2-25-demo-innertext_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cd0_dom-l2-25-demo-innertext/dom-l2-25-demo-innertext_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316cd0_dom-l2-25-demo-innertext/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467546,
          "is_public": true,
          "key": "bd8a5b48-d76d-4072-9190-e9b03069cd0f",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:20.491Z",
          "version": "1.0.0",
          "text": "As you saw, `.innerText` will get the _visible_ text of the element. This is an important distinction! If CSS is used to hide any text inside that element, `.innerText` _will not_ return that text, while `.textContent` _will_ return it. And it's not just the hiding/showing nature of CSS that `.innerText` adheres to, `.innerText` will also honor changes to things like capitalization.\n\nThe `.textContent` property has been a standard for quite a long time. Conversely, `.innerText` property is a relatively new addition to the HTML specification. It has been around for a while but was not fully supported by all browser because it was not a part of the HTML specification.\n\nBetween `.textContent` and `.innerText`, you probably want to use `.textContent` since that will return all of the text no matter what. Rarely will you actually want _only_ the _visible_ text.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467547,
          "is_public": true,
          "key": "3c9e1a3d-80a5-48ac-bd82-7ccf91183350",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:21.423Z",
          "version": "1.0.0",
          "text": "## Update Existing Content Recap\n\nIn this section, we looked at multiple ways to change page content:\n\n* `.innerHTML`\n* `.textContent`\n* `.innerText`\n\nWe saw that to set HTML content for an element, out of the three properties list above, we can only use `.innerHTML`. Using `.textContent` will erroneously include the HTML characters as plain text inside the element.\n\nWe also looked at the difference between `.textContent` and `.innerText`. `.textContent` completely ignores any CSS styling and returns all of the element's HTML just as it's listed in the HTML. On the other hand, the `.innerText` property will take CSS styling into consideration and will return the text that is visibly rendered on the page.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467548,
          "is_public": true,
          "key": "3d934eab-09fd-4e5b-98fe-12aedf96bb5c",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:22.554Z",
          "version": "1.0.0",
          "text": "### Further Research\n\n* [innerHTML on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n* [textContent on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n* [innerText on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText)\n* [Article: The poor, misunderstood innerText](http://perfectionkills.com/the-poor-misunderstood-innerText/)\n* [Article: innertext vs. textcontent](https://kellegous.com/j/2013/02/27/innertext-vs-textcontent/)",
          "instructor_notes": "",
          "resources": null
        }
      ]
    },
    {
      "content_source": null,
      "id": 467401,
      "is_public": true,
      "key": "8cd9dd1c-8347-4e28-ae80-a7cecb48fd00",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Add New Page Content",
      "updated_at": "2019-10-08T12:33:30.347Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        478535,
        467550,
        467551,
        467552,
        467553,
        478430,
        467555,
        467556,
        478431,
        467558,
        467559,
        467560,
        478432,
        467562,
        467563
      ],
      "atoms": [
        {
          "content_source": null,
          "id": 478535,
          "is_public": true,
          "key": "bebb17a0-aeb4-4052-9f47-22dc9f100f98",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "L2 29 - What You'Ll Learn New Content V2",
          "updated_at": "2019-10-08T12:33:23.449Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69706",
            "youtube_id": "HE278gUprhU",
            "topher_id": "84f28bd6-d4a2-11e9-b366-b7992a545d70",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b09d_l2-29-what-youll-learn-new-content-v2/l2-29-what-youll-learn-new-content-v2_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b09d_l2-29-what-youll-learn-new-content-v2/l2-29-what-youll-learn-new-content-v2_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a31b09d_l2-29-what-youll-learn-new-content-v2/l2-29-what-youll-learn-new-content-v2_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b09d_l2-29-what-youll-learn-new-content-v2/l2-29-what-youll-learn-new-content-v2_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a31b09d_l2-29-what-youll-learn-new-content-v2/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467550,
          "is_public": true,
          "key": "29d86a21-56b2-469a-b23a-dc556aad81d6",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:23.860Z",
          "version": "1.0.0",
          "question": {
            "prompt": "You've learned about the `document` object, the Node Interface, and the Element interface. Where does .createElement() come from?",
            "correct_feedback": "The `.createElement()` method is a method on the `document` object.",
            "video_feedback": null,
            "default_feedback": "That doesn't look right. What does a search for \"createElement method\" in your favorite search engine reveal?",
            "answers": [
              {
                "id": "a1512265714344",
                "text": "the `document` object",
                "is_correct": true,
                "incorrect_feedback": null
              },
              {
                "id": "a1512265717228",
                "text": "the Element interface",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512265717837",
                "text": "the Node interface",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512265718606",
                "text": "from another, as-of-yet unintroduced way",
                "is_correct": false,
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467551,
          "is_public": true,
          "key": "11efdfd8-a6e0-44bf-8f89-c65200708f9b",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ValidatedQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:24.251Z",
          "version": "1.0.0",
          "question": {
            "prompt": "What is the URL for the \"createElement\" page on MDN?",
            "default_feedback": "Do a search for the \"createElement\" page on MDN. Then submit the URL for that page.",
            "correct_feedback": "Great job!",
            "video_feedback": null,
            "matchers": [
              {
                "semantic_type": "RegexMatcher",
                "is_correct": true,
                "expression": "https:\\/\\/developer\\.mozilla\\.org\\/en-US\\/docs\\/Web\\/API\\/Document\\/createElement",
                "expression_description": null,
                "flags": "",
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467552,
          "is_public": true,
          "key": "57d19109-4517-4aa5-ae3f-328d96f2ab64",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:24.706Z",
          "version": "1.0.0",
          "question": {
            "prompt": "Which of the following would create a new paragraph element?",
            "correct_feedback": "Awesome work!",
            "video_feedback": null,
            "default_feedback": "Close! What kind of information does `.createElement` need to be called with? What object should `.createElement()` be called on?",
            "answers": [
              {
                "id": "a1512265949967",
                "text": "`document.createElement('p');`",
                "is_correct": true,
                "incorrect_feedback": null
              },
              {
                "id": "a1512265962922",
                "text": "`document.createElement(p);`",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512265963509",
                "text": "`element.createElement('p');`",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512265964196",
                "text": "`element.createElement('paragraph');`",
                "is_correct": false,
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467553,
          "is_public": true,
          "key": "400a4e97-9cad-4e70-b620-2a948e7f0d01",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:25.047Z",
          "version": "1.0.0",
          "text": "As you've already discovered, the `.createElement()` method is a method on the `document` object:\n\n```js\n// creates and returns a <span> element\ndocument.createElement('span');\n\n// creates and returns an <h3> element\ndocument.createElement('h3');\n```\n\nHere's the `.createElement()` documentation page on MDN: [createElement docs](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478430,
          "is_public": true,
          "key": "24be2b6b-9f89-493a-bdf7-985ddf17d646",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 34 - Create New Element",
          "updated_at": "2019-10-08T12:33:25.815Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69617",
            "youtube_id": "sWWH7Knwjhg",
            "topher_id": "84f20d46-d4a2-11e9-b1f2-df089993a973",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cdb_dom-l2-34-create-new-element/dom-l2-34-create-new-element_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cdb_dom-l2-34-create-new-element/dom-l2-34-create-new-element_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316cdb_dom-l2-34-create-new-element/dom-l2-34-create-new-element_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cdb_dom-l2-34-create-new-element/dom-l2-34-create-new-element_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316cdb_dom-l2-34-create-new-element/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467555,
          "is_public": true,
          "key": "1c304014-d0fa-4f39-819c-d8d2d29ee563",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:26.403Z",
          "version": "1.0.0",
          "text": "## Adding Content To The Page\n\nYou may have noticed that using `document.createElement()` to create an element didn't actually add that newly created element anywhere on the page! Creating an element...just creates it. It doesn't add it to the DOM. Since the element isn't added to the DOM, it doesn't appear in the page (if you remember, the DOM is the parsed representation of the page). So, now that we can create brand new elements, we need to be able to add them to the DOM so that they'll show up on the page.\n\nWe can use the `.appendChild()` method to add an element to the page! Before we see how this element works, let's quickly define the word \"append\". There are several different definitions of the word, but I like the wording of the Cambridge Dictionary's the best:\n\n> to add something to the end of a piece of writing\n\n> definition of the word \"append\" ([source](https://dictionary.cambridge.org/us/dictionary/english/append))\n\nNow, to use the `.appendChild()` method, it needs to be **called on another element**, not the `document` object!\n\n```js\n// create a brand new <span> element\nconst newSpan = document.createElement('span');\n\n// select the first (main) heading of the page\nconst mainHeading = document.querySelector('h1');\n\n// add the the <span> element as the last child element of the main heading\nmainHeading.appendChild(newSpan);\n```\n\nI like the Cambridge Dictionary's version because it clearly states how the content is added _at the end_. The `.appendChild()` method is called on one element, and is passed the element to append. The element that is about about to be appended is added as the last child. So, in the example above, the `<span>` element will appear in the DOM as a child of the `<h1>`...but it will appear _at the end_, after all text and any other elements that might be in the `<h1>`.\n\nHere's the `.appendChild()` documentation page on MDN: [appendChild docs)(https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467556,
          "is_public": true,
          "key": "8838cabc-daa1-462d-ab52-02c28a43847d",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:26.876Z",
          "version": "1.0.0",
          "text": "## ⚠️ `.appendChild()` Needs An Element! ⚠️\n\nThis is stated above, but I wanted to call this out, specifically. When you're using the `.appendChild()` method, it must be called on an existing element. To be clear, you can't call this on the `document` object, so the following will result in an error:\n\n```js\nconst newSpan = document.createElement('span');\n\n// causes an error\ndocument.appendChild(newSpan);\n```\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478431,
          "is_public": true,
          "key": "41fe2589-6b8c-4172-8249-bba824244006",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 37 - Adding Content To Page",
          "updated_at": "2019-10-08T12:33:27.278Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69618",
            "youtube_id": "yYfs4AUI99w",
            "topher_id": "85074576-d4a2-11e9-b6bb-aba698eb1b09",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316ce1_dom-l2-37-adding-content-to-page/dom-l2-37-adding-content-to-page_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316ce1_dom-l2-37-adding-content-to-page/dom-l2-37-adding-content-to-page_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316ce1_dom-l2-37-adding-content-to-page/dom-l2-37-adding-content-to-page_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316ce1_dom-l2-37-adding-content-to-page/dom-l2-37-adding-content-to-page_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316ce1_dom-l2-37-adding-content-to-page/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467558,
          "is_public": true,
          "key": "36100d94-2f92-45e7-a4de-e4a69d858922",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:27.753Z",
          "version": "1.0.0",
          "text": "## Creating Text Nodes\n\nJust like you created new elements with the `.createElement()` method, you can also create new _text_ nodes using the `.createTextNode()` method. Take a look at the following code that:\n\n* creates an paragraph element\n* creates a text node\n* appends the text node to the paragraph\n* appends the paragraph to the <body> tag\n\n```js\nconst myPara = document.createElement('p');\nconst textOfParagraph = document.createTextNode('I am the text for the paragraph!');\n\nmyPara.appendChild(textOfParagraph);\ndocument.body.appendChild(myPara);\n```\n\nHowever, since you already know about the `.textContent` property, the code below will provide the exact same result:\n\n```js\nconst myPara = document.createElement('p');\n\nmyPara.textContent = 'I am the text for the paragraph!';\ndocument.body.appendChild(myPara);\n```\n\nTherefore, instead of creating a new text node and appending it to an element, it's faster and easier to just update the element's text with the `.textContent` property.\n\nFor more info, check out the documentation: [createTextNode() docs](https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode)\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467559,
          "is_public": true,
          "key": "d681f477-b6c0-41fd-994e-7a89c176ffd0",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:28.193Z",
          "version": "1.0.0",
          "question": {
            "prompt": "What happens after running this code?\n\n```js\nconst mainHeading = document.querySelector('#main-heading');\nconst otherHeading = document.querySelector('#other-heading');\nconst excitedText = document.createElement('span');\n\nexcitedText.textContent = '!!!';\nmainHeading.appendChild(excitedText);\notherHeading.appendChild(excitedText);\n```\n\nDon't guess it, test it! This one might surprise you!",
            "correct_feedback": "The `.appendChild()` method will move an element from its current position to the new position.",
            "video_feedback": null,
            "default_feedback": "Have you tried running this code in your browser to see the result? (make sure you actually have an element with a `main-heading` ID and one with an `other-heading` ID).",
            "answers": [
              {
                "id": "a1512266412833",
                "text": "only `mainHeading` has three exclamation marks",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512266418597",
                "text": "only `otherHeading` has three exclamation marks",
                "is_correct": true,
                "incorrect_feedback": null
              },
              {
                "id": "a1512266419209",
                "text": "both headings have three exclamation marks",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512266419930",
                "text": "neither has any exclamation marks",
                "is_correct": false,
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467560,
          "is_public": true,
          "key": "6c153e7a-a02c-4452-bf1b-a82da68bc6d6",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:28.596Z",
          "version": "1.0.0",
          "text": "## Inserting HTML In Other Locations\n\nBy definition, the `.appendChild()` method will add an element as the last child of the parent element. It's impossible to put it as the first child or anywhere else...it has to be the last child. Wouldn't it be nice if there were a little flexibility in where we could add the child element?\n\nEnter the `.insertAdjacentHTML()` method! The `.insertAdjacentHTML()` method has to be called with two arguments:\n\n* the location of the HTML\n* the HTML text that is going to be inserted\n\nThe first argument to this method will let us insert the new HTML in one of four different locations\n\n`beforebegin` – inserts the HTML text as a previous sibling\n`afterbegin` – inserts the HTML text as the first child\n`beforeend` – inserts the HTML text as the last child\n`afterend` – inserts the HTML text as a following sibling\n\nA visual example works best, and MDN's documentation has a fantastic example that I'll modify slightly:\n\n```html\n<!-- beforebegin -->\n<p>\n    <!-- afterbegin -->\n    Existing text/HTML content\n    <!-- beforeend -->\n</p>\n<!-- afterend -->\n```\n\nHere's how we'd call `.insertAdjacentHTML()`:\n\n```js\nconst mainHeading = document.querySelector('#main-heading');\nconst htmlTextToAdd = '<h2>Skydiving is fun!</h2>';\n\nmainHeading.insertAdjacentHTML('afterend', htmlTextToAdd);\n```\n\nCheck out the documentation page for more information: [insertAdjacentHTML docs](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478432,
          "is_public": true,
          "key": "0bf6d6c1-2c0b-45fb-9e15-53a591b486d9",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 41 -InsertAdjacentHTML Docs",
          "updated_at": "2019-10-08T12:33:28.983Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69619",
            "youtube_id": "jLgn7ERoUGU",
            "topher_id": "84f267e6-d4a2-11e9-b2fa-cf8160ef0ca5",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cea_dom-l2-41-insertadjacenthtml-docs/dom-l2-41-insertadjacenthtml-docs_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cea_dom-l2-41-insertadjacenthtml-docs/dom-l2-41-insertadjacenthtml-docs_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316cea_dom-l2-41-insertadjacenthtml-docs/dom-l2-41-insertadjacenthtml-docs_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cea_dom-l2-41-insertadjacenthtml-docs/dom-l2-41-insertadjacenthtml-docs_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316cea_dom-l2-41-insertadjacenthtml-docs/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467562,
          "is_public": true,
          "key": "8be9a923-c787-444b-8a37-c2d945403415",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:29.406Z",
          "version": "1.0.0",
          "text": "## Add New Page Content  Recap\n\nIn this section, we learned how to create new DOM elements and add them to the page. We looked at the following methods:\n\n* `.createElement()` to create new elements\n* `.appendChild()` to add a child element to a parent element as its last child\n* `.createTextNode()` to create a text node\n* `.insertAdjacentHTML()` to put HTML text anywhere around an element\n\nSome important things to note are:\n\n* if an element _already exists in the DOM_ and this element is passed to `.appendChild()`, the `.appendChild() method will _move it_ rather than duplicating it\n* an element's `.textContent` property is used more often than creating a text node with the `.createTextNode()` method\n* the `.insertAdjacentHTML()` method's second argument has to be text, you can't pass an element\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467563,
          "is_public": true,
          "key": "eac7992b-e69e-47e2-85c5-78b9317849f1",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:29.944Z",
          "version": "1.0.0",
          "text": "### Further Research\n\n* [createElement on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n* [createTextNode on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode)\n* [appendChild on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)\n* [insertAdjacentHTML on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)",
          "instructor_notes": "",
          "resources": null
        }
      ]
    },
    {
      "content_source": null,
      "id": 467402,
      "is_public": true,
      "key": "6471805e-c4a8-4ed7-8efc-16ba0acbc2c8",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Remove Page Content",
      "updated_at": "2019-10-08T12:33:36.787Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        467564,
        467565,
        478434,
        467567,
        467568,
        467569,
        467570
      ],
      "atoms": [
        {
          "content_source": null,
          "id": 467564,
          "is_public": true,
          "key": "d5ffe82c-efa2-4362-b948-1e05030e0ed7",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:31.241Z",
          "version": "1.0.0",
          "text": "## What's in store!\n\nIn this quick section, you're going to learn how to remove content from the page. Specifically, we'll look at these new methods:\n\n* `.removeChild()`\n* `.remove()`\n\nIn the process, you'll also learn about these two properties:\n\n\n* `.firstElementChild`\n* `.parentElement`\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467565,
          "is_public": true,
          "key": "a116fe68-5e22-4d4a-88a8-b382b6b77ec2",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:32.167Z",
          "version": "1.0.0",
          "text": "## Removing a Child Element\n\nWe can use the `.removeChild()` method to...wait for it...remove a child element. Basically, this is exactly the opposite of the `.appendChild()` method. So just like the `.appendChild()` method, the `.removeChild()` method requires:\n\n* a parent element\n* the child element that will be removed\n\n```js\n<parent-element>.removeChild(<child-to-remove>);\n```\n\nHere's the `.removeChild()` documentation page on MDN: [removeChild docs](https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild)\n\nLet's see how to use this method:\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478434,
          "is_public": true,
          "key": "643d8e81-4c67-44c0-9615-2883d5471f16",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 47 - RemoveChild",
          "updated_at": "2019-10-08T12:33:33.029Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69620",
            "youtube_id": "xeLZabb-nXc",
            "topher_id": "84f23f64-d4a2-11e9-b283-273c13193b5b",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cfb_dom-l2-47-removechild/dom-l2-47-removechild_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cfb_dom-l2-47-removechild/dom-l2-47-removechild_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316cfb_dom-l2-47-removechild/dom-l2-47-removechild_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316cfb_dom-l2-47-removechild/dom-l2-47-removechild_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316cfb_dom-l2-47-removechild/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467567,
          "is_public": true,
          "key": "95d06bd7-96fe-4a8d-a6bb-b804811ee99a",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:34.185Z",
          "version": "1.0.0",
          "text": "### A drawback (and workaround!) with the `.removeChild()` Method\n\nJust like the `.appendChild()` method, there's a (somewhat minor) drawback to the `.removeChild()` method. Both methods:\n\n* require access to parent to function\n\nHowever, we don't actually need to have the parent element because there is a workaround! Just like the `.firstElementChild` property can be called on a parent element to access its first element, every element also has a `parentElement` property that refers to its parent! So if we have access to the child element that we're about to add or remove, you can use the `parentElement` property to \"move focus\" to the element's parent. Then we can call `.removeChild()` (or `.appendChild()`) on that referenced parent element.\n\nLet's look at an example:\n\n```js\nconst mainHeading = document.querySelector('h1');\n\nmainHeading.parentElement.removeChild(mainHeading);\n```\n\nLet's walk through this code. \n\n```js\nconst mainHeading = document.querySelector('h1');\n```\n\nThe preceding code will select the first `<h1>` on the page and stores it in the `mainHeading` variable. Now to the next line:\n\n```js\nmainHeading.parentElement.removeChild(mainHeading);\n```\n\nThis starts with the `mainHeading` variable. It calls `.parentElement`, so the focus of the next code is directed at the parent element. Then `.removeChild()` is called on the parent element. Finally, `mainHeading` itself is passed as the element that needs to be removed from its parent.\n\nSo an element uses itself to remove itself from its parent. Pretty cool, huh?\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467568,
          "is_public": true,
          "key": "a019ff60-8382-4694-bb33-2dfa8ce85852",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:35.210Z",
          "version": "1.0.0",
          "text": "## Removing a Child Element (Part 2!)\n\nWe went through all of those steps selecting an element, using DOM traversal techniques like `.parentElement` and `.firstElementChild`, so that we can remove a child element. I showed you this way so that you can get some exposure and practice to moving around in the DOM. \n\nNow, you might be glad (or frustrated! haha) to find out there's an easier way to do all this! We can move the child element directly with the `.remove()` method:\n\n```js\nconst mainHeading = document.querySelector('h1');\n\nmainHeading.remove();\n```\n\nHere's the `.remove()` documentation page on MDN: [.remove() docs](https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove)",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467569,
          "is_public": true,
          "key": "19cd7502-1b25-4add-9f7b-622e8b7d76f2",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:35.600Z",
          "version": "1.0.0",
          "text": "## Remove Page Content Recap\n\nIn this short section, we learned two ways to remove an element from the page. You learned about:\n\n* `.removeChild()` \n* `.remove()`\n\nThe difference is that with `.removeChild()` must be called on the parent of the element being removed and must be passed the child to be removed, while `.remove()` can be called directly on the element to delete.\n\nWe also learned about the following helpful properties:\n\n* `.firstChild`\n* `.firstElementChild`\n* `.parentElement`\n\nThe difference between `.firstChild` and `.firstElementChild`, is that `.firstElementChild` will always return the first element, while `.firstChild` _might_ return whitespace (if there is any) to preserve the formatting of the underlying HTML source code.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467570,
          "is_public": true,
          "key": "47332c84-212a-4d08-be60-7de03ff82bc5",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:36.315Z",
          "version": "1.0.0",
          "text": "### Further Research\n\n* [removeChild on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild)\n* [remove on MDN](https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove)\n* [firstChild on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild)\n* [firstElementChild on MDN](https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild)\n* [parentElement on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement)\n",
          "instructor_notes": "",
          "resources": null
        }
      ]
    },
    {
      "content_source": null,
      "id": 467403,
      "is_public": true,
      "key": "3734dc32-5300-4ad9-96a8-be488f96a180",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Style Page Content",
      "updated_at": "2019-10-08T12:33:56.447Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        478536,
        467870,
        467872,
        467873,
        467874,
        478435,
        467876,
        467878,
        467880,
        467882,
        467885,
        467888,
        478537,
        467893,
        467894,
        467897,
        467899,
        478437,
        467906,
        478438,
        467908,
        467909
      ],
      "atoms": [
        {
          "content_source": null,
          "id": 478536,
          "is_public": true,
          "key": "6caa33ac-0fa4-4dbb-bbd6-c290b8b68822",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "L2 54 HS - What You'Ll Learn",
          "updated_at": "2019-10-08T12:33:37.515Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69709",
            "youtube_id": "gnEj1o58o_8",
            "topher_id": "84f28dde-d4a2-11e9-b36c-073b20c02996",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b0b7_l2-54-hs-what-youll-learn/l2-54-hs-what-youll-learn_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b0b7_l2-54-hs-what-youll-learn/l2-54-hs-what-youll-learn_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a31b0b7_l2-54-hs-what-youll-learn/l2-54-hs-what-youll-learn_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b0b7_l2-54-hs-what-youll-learn/l2-54-hs-what-youll-learn_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a31b0b7_l2-54-hs-what-youll-learn/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467870,
          "is_public": true,
          "key": "8449636e-39d4-4237-9bf1-6c6fba257d88",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:38.568Z",
          "version": "1.0.0",
          "text": "In this section, we'll be looking at controlling page and element styling using the following properties and methods:\n\n* `.style.<prop>`\n* `.cssText()`\n* `.setAttribute()`\n* `.className`\n* `.classList`\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467872,
          "is_public": true,
          "key": "63af1b4e-5d4d-4548-ad75-a33cade9aee4",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "MatchingQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:39.485Z",
          "version": "1.0.0",
          "question": {
            "complex_prompt": {
              "text": "Before we begin, put these in the correct order of CSS specificity. Put the least-specific option at the top and the most-specific option at the bottom."
            },
            "default_feedback": "Check the order again. You need to put the _least specific_ item at the top, and the _most specific_ item at the bottom.",
            "correct_feedback": "Great job!",
            "video_feedback": null,
            "concepts_label": "Level of Specificity",
            "answers_label": "CSS Rule",
            "concepts": [
              {
                "text": "Least specific",
                "default_concept_feedback": null,
                "correct_answer": {
                  "id": "a1512414570285",
                  "text": "rules in a stylesheet"
                },
                "incorrect_feedbacks": []
              },
              {
                "text": "More specific",
                "default_concept_feedback": null,
                "correct_answer": {
                  "id": "a1512414617348",
                  "text": "rules in a `<style>` tag"
                },
                "incorrect_feedbacks": []
              },
              {
                "text": "Most specific",
                "default_concept_feedback": null,
                "correct_answer": {
                  "id": "a1512414618241",
                  "text": "rules in a tag's style attribute"
                },
                "incorrect_feedbacks": []
              }
            ],
            "answers": [
              {
                "id": "a1512414618241",
                "text": "rules in a tag's style attribute"
              },
              {
                "id": "a1512414617348",
                "text": "rules in a `<style>` tag"
              },
              {
                "id": "a1512414570285",
                "text": "rules in a stylesheet"
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467873,
          "is_public": true,
          "key": "b77fd5fd-4d21-4719-b33a-e9be1af63666",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:40.068Z",
          "version": "1.0.0",
          "text": "> ## CSS Specificity\n\n> To be successful in this section, it will help to have an understanding of how CSS Specificity works. According to the MDN, \"specificity\" is:\n\n> > the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied.\n\n> Basically, the closer the style rule is to an element, the more specific it is. For example, a rule in a style attribute on an element will override a style rule for that element in a CSS stylesheet. There is also the specificity of the _type_ of selector being used. An _ID_ is more specific than a _class_.\n\n> If you'd like to learn more about CSS Specificity, check out the following links:\n\n> * [Specificity on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)\n* [Article: CSS Specificity: Things You Should Know](https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/)\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467874,
          "is_public": true,
          "key": "188d3968-8bb9-4b15-9f1a-84a7b2e5feb1",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:40.641Z",
          "version": "1.0.0",
          "text": "## Modifying an Element's Style Attribute\n\nLet's jump back to your knowledge of CSS. When trying to style an element, the most-specific rules that you can write for an element are written in that element's `style` attribute. Lucky for us, we can access access an element's `style` attribute using the `.style` property! \n\n```js\nconst mainHeading = document.querySelector('h1');\n\nmainHeading.style.color = 'red';\n```\n\nNow, I want to point out that when using the `.style` property, you can only modify _one_ CSS style at a time. That's why the previous code has `.style.color = 'red'` and not just `.style = 'red'`.\n\nCheck out the documentation page for more information: [style docs](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style)",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478435,
          "is_public": true,
          "key": "62aba004-084b-4ef5-bd57-cdf7de75bf5c",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 59 - Modify Styles With Style",
          "updated_at": "2019-10-08T12:33:41.738Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69621",
            "youtube_id": "YvCtuOUMSkE",
            "topher_id": "84f23f1e-d4a2-11e9-b282-034f8b8b9340",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316d08_dom-l2-59-modify-styles-with-style/dom-l2-59-modify-styles-with-style_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316d08_dom-l2-59-modify-styles-with-style/dom-l2-59-modify-styles-with-style_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316d08_dom-l2-59-modify-styles-with-style/dom-l2-59-modify-styles-with-style_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316d08_dom-l2-59-modify-styles-with-style/dom-l2-59-modify-styles-with-style_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316d08_dom-l2-59-modify-styles-with-style/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467876,
          "is_public": true,
          "key": "f50971cf-38f6-4299-8a95-dbf6e42b30b0",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ReflectAtom",
          "title": "Reflect",
          "updated_at": "2019-10-08T12:33:42.224Z",
          "version": "1.0.0",
          "instructor_notes": null,
          "resources": null,
          "question": {
            "title": null,
            "semantic_type": "TextQuestion",
            "evaluation_id": null,
            "text": "Why do you think it has to be `fontSize`? Why would `font-size` not work?"
          },
          "answer": {
            "text": "Thank you for your response.",
            "video": null
          }
        },
        {
          "content_source": null,
          "id": 467878,
          "is_public": true,
          "key": "3a1a6588-f9d8-4cad-accd-19ec02b02785",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "ReflectAtom",
          "title": "Reflect",
          "updated_at": "2019-10-08T12:33:42.576Z",
          "version": "1.0.0",
          "instructor_notes": null,
          "resources": null,
          "question": {
            "title": null,
            "semantic_type": "TextQuestion",
            "evaluation_id": null,
            "text": "Write the JavaScript code to set the width of element to 50%;"
          },
          "answer": {
            "text": "Great work!",
            "video": null
          }
        },
        {
          "content_source": null,
          "id": 467880,
          "is_public": true,
          "key": "0632bc77-485e-478e-b682-cc0b621df3b5",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:42.919Z",
          "version": "1.0.0",
          "text": "## Adding Multiple Styles At Once\n\nWe've seen how the `.style.<property>` syntax will let us change _just one_ piece of styling for an element. So if we wanted to set an element's color, background color, and font size, we'd have to use three separate lines of code:\n\n```js\nconst mainHeading = document.querySelector('h1');\n\nmainHeading.style.color = 'blue';\nmainHeading.style.backgroundColor = 'orange';\nmainHeading.style.fontSize = '3.5em';\n```\n\n...and that's just for setting _three_ styles. Imagine if we needed 15 or 20 different styles! So the `.style.property` syntax is perfect for setting one style at a time, but it's not great for controlling multiple styles.\n\nFortunately, we can use the `.style.cssText` property to set multiple CSS styles at once!\n\n```js\nconst mainHeading = document.querySelector('h1');\n\nmainHeading.style.cssText = 'color: blue; background-color: orange; font-size: 3.5em';\n```\n\nNotice that when using the `.style.cssText` property, you write the CSS styles just as you would in a stylesheet; so you write `font-size` rather than `fontSize`. This is different than using the individual `.style.<property>` way.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467882,
          "is_public": true,
          "key": "0a11a80c-44df-493a-8fb8-489fdf3e683b",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:43.619Z",
          "version": "1.0.0",
          "question": {
            "prompt": "```html\n<p id=\"quizzing-quizzes\" style=\"color: orange;\">Howdy</p>\n```\n\nFor the element above, which of the following styles will be applied after running this code?\n\n```js\ndocument.querySelector('#quizzing-quizzes').style.cssText = 'width: 30px; textDecoration: underline;';\n```\n",
            "correct_feedback": "Only the `width` styling will be in the element's `style` attribute. The `.style.cssText` will overwrite anything that's already in the `.style` attribute (which removes the `color` styling). The `textDecoration` rule is misspelled and should be `text-decoration`, so it gets dropped.",
            "video_feedback": null,
            "default_feedback": "That doesn't look correct to me. Pay attention to the styles that are being applied in the JavaScript code. How do these styles affect the element?",
            "answers": [
              {
                "id": "a1512414902176",
                "text": "color",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512414912078",
                "text": "text-decoration",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512414912795",
                "text": "width",
                "is_correct": true,
                "incorrect_feedback": null
              },
              {
                "id": "a1512414920021",
                "text": "none",
                "is_correct": false,
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467885,
          "is_public": true,
          "key": "67f6603a-e1d1-4947-aac9-c204234632f5",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:44.045Z",
          "version": "1.0.0",
          "text": "## Setting An Element's Attributes\n\nAnother way to set styles for an element is to bypass the `.style.<property>` and `.style.cssText` properties altogether and use the `.setAttribute()` method:\n\n```js\nconst mainHeading = document.querySelector('h1');\n\nmainHeading.setAttribute('style', 'color: blue; background-color: orange; font-size: 3.5em;');\n```\n\nCheck out the documentation page for more information: [style docs](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style)",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467888,
          "is_public": true,
          "key": "125ae4ea-5d6a-45a7-8886-ba3eb9158e2b",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:44.896Z",
          "version": "1.0.0",
          "text": "### `.setAttribute()` Is Not Just For Styling\n\nThe `setAttribute()` method is not _just_ for styling page elements. You can use this method to set _any_ attribute for an element. If you want to give an element an ID, you can do that!:\n\n```js\nconst mainHeading = document.querySelector('h1');\n\n// add an ID to the heading's sibling element\nmainHeading.nextElementSibling.setAttribute('id', 'heading-sibling');\n\n// use the newly added ID to access that element\ndocument.querySelector('#heading-sibling').style.backgroundColor = 'red';\n```\n\nThe last two lines could've been combined into one to bypass setting an ID and just styling the elment directly:\n\n```js\nmainHeading.nextElementSibling.style.backgroundColor = 'red';\n```\n\n...but this was just to demonstrate that it's possible to set an attribute with JavaScript that affects the DOM which then can be used immediately",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478537,
          "is_public": true,
          "key": "97d374f8-5c60-4939-a14a-d962162208c3",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "L2 66 HS - Don'T Put Styles In JS",
          "updated_at": "2019-10-08T12:33:45.738Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69711",
            "youtube_id": "zwdiy-AgiyI",
            "topher_id": "84f25dd2-d4a2-11e9-b2da-4bc8a1e893c3",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b0d7_l2-66-hs-dont-put-styles-in-js/l2-66-hs-dont-put-styles-in-js_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b0d7_l2-66-hs-dont-put-styles-in-js/l2-66-hs-dont-put-styles-in-js_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a31b0d7_l2-66-hs-dont-put-styles-in-js/l2-66-hs-dont-put-styles-in-js_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b0d7_l2-66-hs-dont-put-styles-in-js/l2-66-hs-dont-put-styles-in-js_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a31b0d7_l2-66-hs-dont-put-styles-in-js/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467893,
          "is_public": true,
          "key": "e5f8cb1d-59ed-4b51-9bd9-914bc8bc9df8",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:46.259Z",
          "version": "1.0.0",
          "text": "## Accessing an Element's Classes\n\nThe first element property we'll look at is the `.className` property. This property returns a string of all of the element's classes. If an element has the following HTML:\n\n```html\n<h1 id=\"main-heading\" class=\"ank-student jpk-modal\">Learn Web Development at Udacity</h1>\n```\n\nWe could use `.className` to access the list of classes:\n\n```js\nconst mainHeading = document.querySelector('#main-heading');\n\n// store the list of classes in a variable\nconst listOfClasses = mainHeading.className;\n\n// logs out the string \"ank-student jpk-modal\"\nconsole.log(listOfClasses);\n```\n\nThe `.className` property returns a space-separated string of the classes. This isn't the most ideal format, unfortunately. We can, however, convert this space-separated string into an array using the JavaScript string method, `.split()`:\n\n```js\nconst arrayOfClasses = listOfClasses.split(' ');\n\n// logs out the array of strings [\"ank-student\", \"jpk-modal\"]\nconsole.log(arrayOfClasses);\n```\n\nNow that we have an _array_ of classes, we can do any data-intensive calculations:\n\n* use a `for` loop to loop through the list of class names\n* use `.push()` to add an item to the list\n* use `.pop()` to remove an item from the list\n\n`.className` is a property, so we can set its value just by assigning a string to the property:\n\n```js\nmainHeading.className = \"im-the-new-class\";\n```\n\nThe above code _erases_ any classes that were originally in the element's `class` attribute and replaces it with the single class `im-the-new-class`.\n\nSince `.className` returns a string, it makes it hard to add or remove individual classes. As I mentioned earlier, we can convert the string to an array and then use different Array Methods to search for a class remove it from the list, and then update the `.className` with the remaining classes. However, we don't want to do all of that work! Let's use the newer `.classList` property.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467894,
          "is_public": true,
          "key": "355ab916-808b-42c9-9f6c-84312b20b568",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:47.720Z",
          "version": "1.0.0",
          "text": "### The `.classList` Property\n\nThe `.classList` property is newer than the `.className` property, but is much nicer, check it out:\n\n```html\n<h1 id=\"main-heading\" class=\"ank-student jpk-modal\">Learn Web Development at Udacity</h1>\n```\n\n```js\nconst mainHeading = document.querySelector('#main-heading');\n\n// store the list of classes in a variable\nconst listOfClasses = mainHeading.classList;\n\n// logs out [\"ank-student\", \"jpk-modal\"]\nconsole.log(listOfClasses);\n``` \n\nCheck out the documentation page on MDN: [classList docs](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467897,
          "is_public": true,
          "key": "38cf4551-585e-4ac3-902f-269c748f6fb1",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:49.756Z",
          "version": "1.0.0",
          "question": {
            "prompt": "Review the [classList property's documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList). What data structure does the `.classList` property return?",
            "correct_feedback": "Great job reading through the property's docs! Reading documentation is one of the best ways to learn how a property or method works.",
            "video_feedback": null,
            "default_feedback": "That doesn't look entirely accurate. Have you reviewed [classList's docs](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)?",
            "answers": [
              {
                "id": "a1512415139904",
                "text": "an array",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512415142640",
                "text": "a NodeList",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512415143209",
                "text": "a DOMTokenList",
                "is_correct": true,
                "incorrect_feedback": null
              },
              {
                "id": "a1512415143891",
                "text": "an ElementList",
                "is_correct": false,
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 467899,
          "is_public": true,
          "key": "ff93df95-f199-4782-ba01-833231a28123",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:51.265Z",
          "version": "1.0.0",
          "text": "The `.classList` property has a number of properties of its own. Some of the most popularly used ones are:\n\n* `.add()` - to add a class to the list\n* `.remove()` - to remove a class from the list\n* `.toggle()` - to add the class if it doesn't exists or remove it from the list if it does already exist\n* `.contains()` - returns returns a boolean based on if the class exists in the list or not\n\nLet's take a look!\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 478437,
          "is_public": true,
          "key": "424f4b3d-6024-4e21-b63e-1d72e159fa13",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 71 - ClassList",
          "updated_at": "2019-10-08T12:33:53.328Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69622",
            "youtube_id": "SIjgdT1O2Ns",
            "topher_id": "84f228c6-d4a2-11e9-b242-076e6fa4187c",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316d15_dom-l2-71-classlist/dom-l2-71-classlist_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316d15_dom-l2-71-classlist/dom-l2-71-classlist_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316d15_dom-l2-71-classlist/dom-l2-71-classlist_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316d15_dom-l2-71-classlist/dom-l2-71-classlist_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316d15_dom-l2-71-classlist/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467906,
          "is_public": true,
          "key": "5fdc97da-ce16-4f5d-b944-565679892e71",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "CheckboxQuizAtom",
          "title": "",
          "updated_at": "2019-10-08T12:33:54.172Z",
          "version": "1.0.0",
          "question": {
            "prompt": "What happens if you try to toggle a nonexistent class? For example, if you had this HTML:\n\n```html\n<h1 id=\"main-heading\" class=\"ank-student jpk-modal\">Learn Web Development at Udacity</h1>\n```\n\n...what would happen after running the following JavaScript:\n\n```js\nconst mainHeading = document.querySelector('#main-heading');\n\nmainHeading.classList.toggle('richard');\n``` ",
            "correct_feedback": "Toggling a non-existent class will add the new class to the list of classes.",
            "video_feedback": null,
            "default_feedback": "That doesn't look correct. Have you checked out the [documentation for the classList property](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList) yet?",
            "answers": [
              {
                "id": "a1512415370788",
                "text": "the `richard` class is added to the list of classes",
                "is_correct": true,
                "incorrect_feedback": null
              },
              {
                "id": "a1512415375484",
                "text": "the `richard` class is not added to the list; the existing list of classes remains the same",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512415376264",
                "text": "the `richard` class replaces the other classes",
                "is_correct": false,
                "incorrect_feedback": null
              },
              {
                "id": "a1512415376916",
                "text": "an error happens",
                "is_correct": false,
                "incorrect_feedback": null
              }
            ]
          }
        },
        {
          "content_source": null,
          "id": 478438,
          "is_public": true,
          "key": "d6d7e6ce-a193-40fa-b2df-91ec2bfd6fa1",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "DOM L2 73 - DOMContentLoaded",
          "updated_at": "2019-10-08T12:33:54.882Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69623",
            "youtube_id": "To24p4StUMw",
            "topher_id": "84f1bc1a-d4a2-11e9-b105-a3799a77bd79",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316d23_dom-l2-73-domcontentloaded/dom-l2-73-domcontentloaded_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a316d23_dom-l2-73-domcontentloaded/dom-l2-73-domcontentloaded_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a316d23_dom-l2-73-domcontentloaded/dom-l2-73-domcontentloaded_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a316d23_dom-l2-73-domcontentloaded/dom-l2-73-domcontentloaded_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a316d23_dom-l2-73-domcontentloaded/hls/playlist.m3u8"
            }
          }
        },
        {
          "content_source": null,
          "id": 467908,
          "is_public": true,
          "key": "4e04159a-17b9-401f-bfc9-9f4bdd76ad70",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:55.513Z",
          "version": "1.0.0",
          "text": "## Style Page Content Recap\n\nWe learned a ton of content in this section! We looked at:\n\n* modifying individual styles with `.style.<prop>`\n* updating multiple styles at once with `.style.cssText`\n* getting/setting a list of classes with `.className`\n* getting/setting/toggling CSS classes with `.classList`\n\nMy recommendation to you is that, out of the list of techniques you learned in this section, to use the `.classList` property more than any other. `.classList` is by far the most helpful property of the bunch, and it helps to keep your CSS styling out of your JavaScript code.\n",
          "instructor_notes": "",
          "resources": null
        },
        {
          "content_source": null,
          "id": 467909,
          "is_public": true,
          "key": "b61a3546-2d4a-446c-8a19-ac0da129a486",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "TextAtom",
          "title": null,
          "updated_at": "2019-10-08T12:33:56.127Z",
          "version": "1.0.0",
          "text": "### Further Research\n\n* [style on MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style)\n* [Article: Using dynamic styling information](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information)\n* [DOM methods to control styling](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#DOM-CSS_CSSOM)\n* [nextElementSibling on MDN](https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling)\n* [className on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n* [classList on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n* [Specificity on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)\n* [Article: CSS Specificity: Things You Should Know](https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/)\n",
          "instructor_notes": "",
          "resources": null
        }
      ]
    },
    {
      "content_source": null,
      "id": 467404,
      "is_public": true,
      "key": "01e1ac22-20eb-4ffb-be64-4d40aade94d9",
      "locale": "en-us",
      "root_owner_id": null,
      "semantic_type": "Concept",
      "title": "Lesson summary",
      "updated_at": "2019-10-08T12:33:57.405Z",
      "version": "1.0.0",
      "resources": null,
      "_atoms_ids": [
        478539
      ],
      "atoms": [
        {
          "content_source": null,
          "id": 478539,
          "is_public": true,
          "key": "991a54db-d637-469c-b6ba-fa9b2fcb5571",
          "locale": "en-us",
          "root_owner_id": null,
          "semantic_type": "VideoAtom",
          "title": "Creating Content with JavaScript - Lesson Summary",
          "updated_at": "2019-10-08T12:33:56.916Z",
          "version": "1.0.0",
          "tags": [],
          "instructor_notes": "",
          "resources": null,
          "video": {
            "id": "69713",
            "youtube_id": "_iWc_IwatOc",
            "topher_id": "8504a5be-d4a2-11e9-ae86-23700f8b0c96",
            "subtitles": [],
            "transcodings": {
              "uri_480p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b0e5_l2-76-hs-lesson-summary/l2-76-hs-lesson-summary_480p.mp4",
              "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b0e5_l2-76-hs-lesson-summary/l2-76-hs-lesson-summary_480p_1000kbps.mp4",
              "uri_480p_ogg": "https://video.udacity-data.com/topher/2017/December/5a31b0e5_l2-76-hs-lesson-summary/l2-76-hs-lesson-summary_480p.ogg",
              "uri_720p_mp4": "https://video.udacity-data.com/topher/2017/December/5a31b0e5_l2-76-hs-lesson-summary/l2-76-hs-lesson-summary_720p.mp4",
              "uri_hls": "https://video.udacity-data.com/topher/2017/December/5a31b0e5_l2-76-hs-lesson-summary/hls/playlist.m3u8"
            }
          }
        }
      ]
    }
  ]
}